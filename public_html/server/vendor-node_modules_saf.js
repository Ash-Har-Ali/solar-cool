"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-node_modules_saf";
exports.ids = ["vendor-node_modules_saf"];
exports.modules = {

/***/ "(ssr)/./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ \nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar Buffer = buffer.Buffer;\n// alternative to using Object.keys for old browsers\nfunction copyProps(src, dst) {\n    for(var key in src){\n        dst[key] = src[key];\n    }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n    module.exports = buffer;\n} else {\n    // Copy properties from require('buffer')\n    copyProps(buffer, exports);\n    exports.Buffer = SafeBuffer;\n}\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n    return Buffer(arg, encodingOrOffset, length);\n}\nSafeBuffer.prototype = Object.create(Buffer.prototype);\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer);\nSafeBuffer.from = function(arg, encodingOrOffset, length) {\n    if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n    }\n    return Buffer(arg, encodingOrOffset, length);\n};\nSafeBuffer.alloc = function(size, fill, encoding) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    var buf = Buffer(size);\n    if (fill !== undefined) {\n        if (typeof encoding === \"string\") {\n            buf.fill(fill, encoding);\n        } else {\n            buf.fill(fill);\n        }\n    } else {\n        buf.fill(0);\n    }\n    return buf;\n};\nSafeBuffer.allocUnsafe = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return Buffer(size);\n};\nSafeBuffer.allocUnsafeSlow = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return buffer.SlowBuffer(size);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsa0ZBQWtGLEdBQ2xGLHlDQUF5QztBQUN6QyxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxTQUFTRixPQUFPRSxNQUFNO0FBRTFCLG9EQUFvRDtBQUNwRCxTQUFTQyxVQUFXQyxHQUFHLEVBQUVDLEdBQUc7SUFDMUIsSUFBSyxJQUFJQyxPQUFPRixJQUFLO1FBQ25CQyxHQUFHLENBQUNDLElBQUksR0FBR0YsR0FBRyxDQUFDRSxJQUFJO0lBQ3JCO0FBQ0Y7QUFDQSxJQUFJSixPQUFPSyxJQUFJLElBQUlMLE9BQU9NLEtBQUssSUFBSU4sT0FBT08sV0FBVyxJQUFJUCxPQUFPUSxlQUFlLEVBQUU7SUFDL0VDLE9BQU9DLE9BQU8sR0FBR1o7QUFDbkIsT0FBTztJQUNMLHlDQUF5QztJQUN6Q0csVUFBVUgsUUFBUVk7SUFDbEJBLGNBQWMsR0FBR0M7QUFDbkI7QUFFQSxTQUFTQSxXQUFZQyxHQUFHLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNO0lBQ2hELE9BQU9kLE9BQU9ZLEtBQUtDLGtCQUFrQkM7QUFDdkM7QUFFQUgsV0FBV0ksU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNqQixPQUFPZSxTQUFTO0FBRXJELGtDQUFrQztBQUNsQ2QsVUFBVUQsUUFBUVc7QUFFbEJBLFdBQVdOLElBQUksR0FBRyxTQUFVTyxHQUFHLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNO0lBQ3ZELElBQUksT0FBT0YsUUFBUSxVQUFVO1FBQzNCLE1BQU0sSUFBSU0sVUFBVTtJQUN0QjtJQUNBLE9BQU9sQixPQUFPWSxLQUFLQyxrQkFBa0JDO0FBQ3ZDO0FBRUFILFdBQVdMLEtBQUssR0FBRyxTQUFVYSxJQUFJLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUMvQyxJQUFJLE9BQU9GLFNBQVMsVUFBVTtRQUM1QixNQUFNLElBQUlELFVBQVU7SUFDdEI7SUFDQSxJQUFJSSxNQUFNdEIsT0FBT21CO0lBQ2pCLElBQUlDLFNBQVNHLFdBQVc7UUFDdEIsSUFBSSxPQUFPRixhQUFhLFVBQVU7WUFDaENDLElBQUlGLElBQUksQ0FBQ0EsTUFBTUM7UUFDakIsT0FBTztZQUNMQyxJQUFJRixJQUFJLENBQUNBO1FBQ1g7SUFDRixPQUFPO1FBQ0xFLElBQUlGLElBQUksQ0FBQztJQUNYO0lBQ0EsT0FBT0U7QUFDVDtBQUVBWCxXQUFXSixXQUFXLEdBQUcsU0FBVVksSUFBSTtJQUNyQyxJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QixNQUFNLElBQUlELFVBQVU7SUFDdEI7SUFDQSxPQUFPbEIsT0FBT21CO0FBQ2hCO0FBRUFSLFdBQVdILGVBQWUsR0FBRyxTQUFVVyxJQUFJO0lBQ3pDLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE1BQU0sSUFBSUQsVUFBVTtJQUN0QjtJQUNBLE9BQU9wQixPQUFPMEIsVUFBVSxDQUFDTDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanM/Y2YyZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgc2FmZS1idWZmZXIuIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlci5wcm90b3R5cGUpXG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIl0sIm5hbWVzIjpbImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJrZXkiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/safe-buffer/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 8290,\n    4: 8291,\n    5: 8288,\n    6: 65279,\n    7: 8289,\n    8: 119155,\n    9: 119156,\n    a: 119157,\n    b: 119158,\n    c: 119159,\n    d: 119160,\n    e: 119161,\n    f: 119162\n}, c = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 65279\n}, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n    let e = JSON.stringify(t);\n    return `${u}${Array.from(e).map((r)=>{\n        let n = r.charCodeAt(0);\n        if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n        return Array.from(n.toString(4).padStart(4, \"0\")).map((o)=>String.fromCodePoint(c[o])).join(\"\");\n    }).join(\"\")}`;\n}\nfunction I(t) {\n    return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n    try {\n        new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction C(t, e, r = \"auto\") {\n    return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t)=>t.reverse()));\nObject.fromEntries(Object.entries(s).map((t)=>t.reverse()));\nvar S = `${Object.values(s).map((t)=>`\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n    var e;\n    return {\n        cleaned: t.replace(f, \"\"),\n        encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\"\n    };\n}\nfunction O(t) {\n    return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n    return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n //# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsSUFBSTtJQUFFLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTyxHQUFHO0lBQU0sR0FBRztJQUFRLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7QUFBTyxHQUFHSCxJQUFJO0lBQUUsR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztBQUFNLEdBQUdJLElBQUksSUFBSUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLE9BQU9DLGFBQWEsQ0FBQ1IsQ0FBQyxDQUFDLEVBQUUsR0FBR1MsSUFBSSxDQUFDO0FBQ2pSLFNBQVNDLEVBQUVDLENBQUM7SUFDVixJQUFJVCxJQUFJVSxLQUFLQyxTQUFTLENBQUNGO0lBQ3ZCLE9BQU8sQ0FBQyxFQUFFUCxFQUFFLEVBQUVDLE1BQU1TLElBQUksQ0FBQ1osR0FBR2EsR0FBRyxDQUFDLENBQUNDO1FBQy9CLElBQUlDLElBQUlELEVBQUVFLFVBQVUsQ0FBQztRQUNyQixJQUFJRCxJQUFJLEtBQ04sTUFBTSxJQUFJRSxNQUFNLENBQUMsZ0VBQWdFLEVBQUVqQixFQUFFLGNBQWMsRUFBRWMsRUFBRSxFQUFFLEVBQUVDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pILE9BQU9aLE1BQU1TLElBQUksQ0FBQ0csRUFBRUcsUUFBUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxHQUFHLE1BQU1OLEdBQUcsQ0FBQyxDQUFDTyxJQUFNZixPQUFPQyxhQUFhLENBQUNSLENBQUMsQ0FBQ3NCLEVBQUUsR0FBR2IsSUFBSSxDQUFDO0lBQ2hHLEdBQUdBLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDZjtBQUNBLFNBQVNjLEVBQUVaLENBQUM7SUFDVixPQUFPLENBQUNhLE9BQU9DLEtBQUssQ0FBQ0QsT0FBT2IsT0FBTyxTQUFTZSxJQUFJLENBQUNmLE1BQU0sQ0FBQywyREFBMkRlLElBQUksQ0FBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDZ0IsS0FBS0MsS0FBSyxDQUFDakI7QUFDako7QUFDQSxTQUFTa0IsRUFBRWxCLENBQUM7SUFDVixJQUFJO1FBQ0YsSUFBSW1CLElBQUluQixHQUFHQSxFQUFFb0IsVUFBVSxDQUFDLE9BQU8scUJBQXFCLEtBQUs7SUFDM0QsRUFBRSxPQUFNO1FBQ04sT0FBTyxDQUFDO0lBQ1Y7SUFDQSxPQUFPLENBQUM7QUFDVjtBQUNBLFNBQVNDLEVBQUVyQixDQUFDLEVBQUVULENBQUMsRUFBRWMsSUFBSSxNQUFNO0lBQ3pCLE9BQU9BLE1BQU0sQ0FBQyxLQUFLQSxNQUFNLFVBQVdPLENBQUFBLEVBQUVaLE1BQU1rQixFQUFFbEIsRUFBQyxJQUFLQSxJQUFJLENBQUMsRUFBRUEsRUFBRSxFQUFFRCxFQUFFUixHQUFHLENBQUM7QUFDdkU7QUFDQStCLE9BQU9DLFdBQVcsQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDbkMsR0FBR2UsR0FBRyxDQUFDLENBQUNKLElBQU1BLEVBQUV5QixPQUFPO0FBQ3pESCxPQUFPQyxXQUFXLENBQUNELE9BQU9FLE9BQU8sQ0FBQ3RDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTUEsRUFBRXlCLE9BQU87QUFDekQsSUFBSUMsSUFBSSxDQUFDLEVBQUVKLE9BQU9LLE1BQU0sQ0FBQ3pDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTSxDQUFDLElBQUksRUFBRUEsRUFBRVMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRU4sSUFBSSxJQUFJb0MsT0FBTyxDQUFDLENBQUMsRUFBRUYsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMxRyxTQUFTRyxFQUFFN0IsQ0FBQztJQUNWLElBQUlUO0lBQ0osT0FBTztRQUFFdUMsU0FBUzlCLEVBQUUrQixPQUFPLENBQUN2QyxHQUFHO1FBQUt3QyxTQUFTLENBQUMsQ0FBQ3pDLElBQUlTLEVBQUVpQyxLQUFLLENBQUN6QyxFQUFDLEtBQU0sT0FBTyxLQUFLLElBQUlELENBQUMsQ0FBQyxFQUFFLEtBQUs7SUFBRztBQUNoRztBQUNBLFNBQVMyQyxFQUFFbEMsQ0FBQztJQUNWLE9BQU9BLEtBQUtDLEtBQUtnQixLQUFLLENBQUNZLEVBQUU1QixLQUFLQyxTQUFTLENBQUNGLElBQUk4QixPQUFPO0FBQ3JEO0FBQ0EsU0FBU0ssV0FBV0MsTUFBTTtJQUN4QixPQUFPRixFQUFFRTtBQUNYO0FBQ0EsTUFBTUMsc0JBQXNCRjtBQUsxQixDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanM/MmI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogODI5MCwgNDogODI5MSwgNTogODI4OCwgNjogNjUyNzksIDc6IDgyODksIDg6IDExOTE1NSwgOTogMTE5MTU2LCBhOiAxMTkxNTcsIGI6IDExOTE1OCwgYzogMTE5MTU5LCBkOiAxMTkxNjAsIGU6IDExOTE2MSwgZjogMTE5MTYyIH0sIGMgPSB7IDA6IDgyMDMsIDE6IDgyMDQsIDI6IDgyMDUsIDM6IDY1Mjc5IH0sIHUgPSBuZXcgQXJyYXkoNCkuZmlsbChTdHJpbmcuZnJvbUNvZGVQb2ludChjWzBdKSkuam9pbihcIlwiKTtcbmZ1bmN0aW9uIEUodCkge1xuICBsZXQgZSA9IEpTT04uc3RyaW5naWZ5KHQpO1xuICByZXR1cm4gYCR7dX0ke0FycmF5LmZyb20oZSkubWFwKChyKSA9PiB7XG4gICAgbGV0IG4gPSByLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKG4gPiAyNTUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgQVNDSUkgZWRpdCBpbmZvIGNhbiBiZSBlbmNvZGVkLiBFcnJvciBhdHRlbXB0aW5nIHRvIGVuY29kZSAke2V9IG9uIGNoYXJhY3RlciAke3J9ICgke259KWApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKG4udG9TdHJpbmcoNCkucGFkU3RhcnQoNCwgXCIwXCIpKS5tYXAoKG8pID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KGNbb10pKS5qb2luKFwiXCIpO1xuICB9KS5qb2luKFwiXCIpfWA7XG59XG5mdW5jdGlvbiBJKHQpIHtcbiAgcmV0dXJuICFOdW1iZXIuaXNOYU4oTnVtYmVyKHQpKSB8fCAvW2Etel0vaS50ZXN0KHQpICYmICEvXFxkKyg/OlstOlxcL11cXGQrKXsyfSg/OlRcXGQrKD86Wy06XFwvXVxcZCspezEsMn0oXFwuXFxkKyk/Wj8pPy8udGVzdCh0KSA/ICExIDogISFEYXRlLnBhcnNlKHQpO1xufVxuZnVuY3Rpb24gVCh0KSB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh0LCB0LnN0YXJ0c1dpdGgoXCIvXCIpID8gXCJodHRwczovL2FjbWUuY29tXCIgOiB2b2lkIDApO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gQyh0LCBlLCByID0gXCJhdXRvXCIpIHtcbiAgcmV0dXJuIHIgPT09ICEwIHx8IHIgPT09IFwiYXV0b1wiICYmIChJKHQpIHx8IFQodCkpID8gdCA6IGAke3R9JHtFKGUpfWA7XG59XG5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYykubWFwKCh0KSA9PiB0LnJldmVyc2UoKSkpO1xuT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHMpLm1hcCgodCkgPT4gdC5yZXZlcnNlKCkpKTtcbnZhciBTID0gYCR7T2JqZWN0LnZhbHVlcyhzKS5tYXAoKHQpID0+IGBcXFxcdXske3QudG9TdHJpbmcoMTYpfX1gKS5qb2luKFwiXCIpfWAsIGYgPSBuZXcgUmVnRXhwKGBbJHtTfV17NCx9YCwgXCJndVwiKTtcbmZ1bmN0aW9uIF8odCkge1xuICB2YXIgZTtcbiAgcmV0dXJuIHsgY2xlYW5lZDogdC5yZXBsYWNlKGYsIFwiXCIpLCBlbmNvZGVkOiAoKGUgPSB0Lm1hdGNoKGYpKSA9PSBudWxsID8gdm9pZCAwIDogZVswXSkgfHwgXCJcIiB9O1xufVxuZnVuY3Rpb24gTyh0KSB7XG4gIHJldHVybiB0ICYmIEpTT04ucGFyc2UoXyhKU09OLnN0cmluZ2lmeSh0KSkuY2xlYW5lZCk7XG59XG5mdW5jdGlvbiBzdGVnYUNsZWFuKHJlc3VsdCkge1xuICByZXR1cm4gTyhyZXN1bHQpO1xufVxuY29uc3QgdmVyY2VsU3RlZ2FDbGVhbkFsbCA9IHN0ZWdhQ2xlYW47XG5leHBvcnQge1xuICBDLFxuICBzdGVnYUNsZWFuLFxuICB2ZXJjZWxTdGVnYUNsZWFuQWxsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RlZ2FDbGVhbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJzIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwidSIsIkFycmF5IiwiZmlsbCIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJqb2luIiwiRSIsInQiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbSIsIm1hcCIsInIiLCJuIiwiY2hhckNvZGVBdCIsIkVycm9yIiwidG9TdHJpbmciLCJwYWRTdGFydCIsIm8iLCJJIiwiTnVtYmVyIiwiaXNOYU4iLCJ0ZXN0IiwiRGF0ZSIsInBhcnNlIiwiVCIsIlVSTCIsInN0YXJ0c1dpdGgiLCJDIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicmV2ZXJzZSIsIlMiLCJ2YWx1ZXMiLCJSZWdFeHAiLCJfIiwiY2xlYW5lZCIsInJlcGxhY2UiLCJlbmNvZGVkIiwibWF0Y2giLCJPIiwic3RlZ2FDbGVhbiIsInJlc3VsdCIsInZlcmNlbFN0ZWdhQ2xlYW5BbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(ssr)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) throw new Error(\"Path is not an array\");\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") return `${target}[${segment}]`;\n        if (segmentType === \"string\") return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n        if (isKeySegment(segment) && segment._key) return `${target}[_key==\"${segment._key}\"]`;\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return `${target}[${from}:${to}]`;\n        }\n        throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": `\n`,\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return `$${path.map((segment)=>typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match)=>ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n    const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    for(; (match = parseRe.exec(path)) !== null;){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>UNESCAPE[m]);\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>UNESCAPE[m]);\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._key !== \"\") return {\n            _key: segment._key\n        };\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!csm?.mappings) return;\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) return {\n        mapping: csm.mappings[resultMappingPath],\n        matchedPath: resultMappingPath,\n        pathSuffix: \"\"\n    };\n    const mappings = Object.entries(csm.mappings).filter(([key])=>resultMappingPath.startsWith(key)).sort(([key1], [key2])=>key2.length - key1.length);\n    if (mappings.length == 0) return;\n    const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n    if (isArray(value)) return value.map((v, idx)=>{\n        if (isRecord(v)) {\n            const _key = v._key;\n            if (typeof _key == \"string\") return walkMap(v, mappingFn, path.concat({\n                _key,\n                _index: idx\n            }));\n        }\n        return walkMap(v, mappingFn, path.concat(idx));\n    });\n    if (isRecord(value)) {\n        if (value._type === \"block\" || value._type === \"span\") {\n            const result = {\n                ...value\n            };\n            return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n        }\n        return Object.fromEntries(Object.entries(value).map(([k, v])=>[\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ]));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value != \"string\") return value;\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) return value;\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\") return value;\n        const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    return id.startsWith(DRAFTS_PREFIX) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path, projectId, dataset } = options;\n    if (!baseUrl) throw new Error(\"baseUrl is required\");\n    if (!path) throw new Error(\"path is required\");\n    if (!_id) throw new Error(\"id is required\");\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n    const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), _id.startsWith(DRAFTS_PREFIX) && searchParams.set(\"isDraft\", \"\");\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    workspace && segments.push(workspace);\n    const routerParams = [\n        \"mode=presentation\",\n        `id=${id}`,\n        `type=${type}`,\n        `path=${encodeURIComponent(stringifiedPath)}`\n    ];\n    return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n    return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? {\n        baseUrl\n    } : {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = ({ sourcePath, resultPath, value })=>{\n    if (isValidDate(value) || isValidURL(value)) return !1;\n    const endPath = sourcePath.at(-1);\n    return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\") || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"textTheme\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction hasTypeLike(path) {\n    return path.some((segment)=>typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    if (!resultSourceMap) return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n        result,\n        resultSourceMap,\n        config\n    }), result;\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    }, resultWithStega = encodeIntoResult(result, resultSourceMap, ({ sourcePath, sourceDocument, resultPath, value })=>{\n        if ((typeof filter == \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === !1) return logger && report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        }), value;\n        logger && report.encoded.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        });\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n        return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath,\n                ...!config.omitCrossDatasetReferenceData && {\n                    dataset,\n                    projectId\n                }\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        !1);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n        if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(`[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`)), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped)skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            logger?.log?.(\"[@sanity/client]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        (isSkipping || isEncoding) && logger?.groupEnd?.();\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 8290,\n    4: 8291,\n    5: 8288,\n    6: 65279,\n    7: 8289,\n    8: 119155,\n    9: 119156,\n    a: 119157,\n    b: 119158,\n    c: 119159,\n    d: 119160,\n    e: 119161,\n    f: 119162\n}, c = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 65279\n}, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n    let e = JSON.stringify(t);\n    return `${u}${Array.from(e).map((r)=>{\n        let n = r.charCodeAt(0);\n        if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n        return Array.from(n.toString(4).padStart(4, \"0\")).map((o)=>String.fromCodePoint(c[o])).join(\"\");\n    }).join(\"\")}`;\n}\nfunction I(t) {\n    return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n    try {\n        new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction C(t, e, r = \"auto\") {\n    return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t)=>t.reverse()));\nObject.fromEntries(Object.entries(s).map((t)=>t.reverse()));\nvar S = `${Object.values(s).map((t)=>`\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n    var e;\n    return {\n        cleaned: t.replace(f, \"\"),\n        encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\"\n    };\n}\nfunction O(t) {\n    return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n    return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n //# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsSUFBSTtJQUFFLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztJQUFNLEdBQUc7SUFBTyxHQUFHO0lBQU0sR0FBRztJQUFRLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7SUFBUUMsR0FBRztJQUFRQyxHQUFHO0lBQVFDLEdBQUc7QUFBTyxHQUFHSCxJQUFJO0lBQUUsR0FBRztJQUFNLEdBQUc7SUFBTSxHQUFHO0lBQU0sR0FBRztBQUFNLEdBQUdJLElBQUksSUFBSUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLE9BQU9DLGFBQWEsQ0FBQ1IsQ0FBQyxDQUFDLEVBQUUsR0FBR1MsSUFBSSxDQUFDO0FBQ2pSLFNBQVNDLEVBQUVDLENBQUM7SUFDVixJQUFJVCxJQUFJVSxLQUFLQyxTQUFTLENBQUNGO0lBQ3ZCLE9BQU8sQ0FBQyxFQUFFUCxFQUFFLEVBQUVDLE1BQU1TLElBQUksQ0FBQ1osR0FBR2EsR0FBRyxDQUFDLENBQUNDO1FBQy9CLElBQUlDLElBQUlELEVBQUVFLFVBQVUsQ0FBQztRQUNyQixJQUFJRCxJQUFJLEtBQ04sTUFBTSxJQUFJRSxNQUFNLENBQUMsZ0VBQWdFLEVBQUVqQixFQUFFLGNBQWMsRUFBRWMsRUFBRSxFQUFFLEVBQUVDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pILE9BQU9aLE1BQU1TLElBQUksQ0FBQ0csRUFBRUcsUUFBUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxHQUFHLE1BQU1OLEdBQUcsQ0FBQyxDQUFDTyxJQUFNZixPQUFPQyxhQUFhLENBQUNSLENBQUMsQ0FBQ3NCLEVBQUUsR0FBR2IsSUFBSSxDQUFDO0lBQ2hHLEdBQUdBLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDZjtBQUNBLFNBQVNjLEVBQUVaLENBQUM7SUFDVixPQUFPLENBQUNhLE9BQU9DLEtBQUssQ0FBQ0QsT0FBT2IsT0FBTyxTQUFTZSxJQUFJLENBQUNmLE1BQU0sQ0FBQywyREFBMkRlLElBQUksQ0FBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDZ0IsS0FBS0MsS0FBSyxDQUFDakI7QUFDako7QUFDQSxTQUFTa0IsRUFBRWxCLENBQUM7SUFDVixJQUFJO1FBQ0YsSUFBSW1CLElBQUluQixHQUFHQSxFQUFFb0IsVUFBVSxDQUFDLE9BQU8scUJBQXFCLEtBQUs7SUFDM0QsRUFBRSxPQUFNO1FBQ04sT0FBTyxDQUFDO0lBQ1Y7SUFDQSxPQUFPLENBQUM7QUFDVjtBQUNBLFNBQVNDLEVBQUVyQixDQUFDLEVBQUVULENBQUMsRUFBRWMsSUFBSSxNQUFNO0lBQ3pCLE9BQU9BLE1BQU0sQ0FBQyxLQUFLQSxNQUFNLFVBQVdPLENBQUFBLEVBQUVaLE1BQU1rQixFQUFFbEIsRUFBQyxJQUFLQSxJQUFJLENBQUMsRUFBRUEsRUFBRSxFQUFFRCxFQUFFUixHQUFHLENBQUM7QUFDdkU7QUFDQStCLE9BQU9DLFdBQVcsQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDbkMsR0FBR2UsR0FBRyxDQUFDLENBQUNKLElBQU1BLEVBQUV5QixPQUFPO0FBQ3pESCxPQUFPQyxXQUFXLENBQUNELE9BQU9FLE9BQU8sQ0FBQ3RDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTUEsRUFBRXlCLE9BQU87QUFDekQsSUFBSUMsSUFBSSxDQUFDLEVBQUVKLE9BQU9LLE1BQU0sQ0FBQ3pDLEdBQUdrQixHQUFHLENBQUMsQ0FBQ0osSUFBTSxDQUFDLElBQUksRUFBRUEsRUFBRVMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVYLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRU4sSUFBSSxJQUFJb0MsT0FBTyxDQUFDLENBQUMsRUFBRUYsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMxRyxTQUFTRyxFQUFFN0IsQ0FBQztJQUNWLElBQUlUO0lBQ0osT0FBTztRQUFFdUMsU0FBUzlCLEVBQUUrQixPQUFPLENBQUN2QyxHQUFHO1FBQUt3QyxTQUFTLENBQUMsQ0FBQ3pDLElBQUlTLEVBQUVpQyxLQUFLLENBQUN6QyxFQUFDLEtBQU0sT0FBTyxLQUFLLElBQUlELENBQUMsQ0FBQyxFQUFFLEtBQUs7SUFBRztBQUNoRztBQUNBLFNBQVMyQyxFQUFFbEMsQ0FBQztJQUNWLE9BQU9BLEtBQUtDLEtBQUtnQixLQUFLLENBQUNZLEVBQUU1QixLQUFLQyxTQUFTLENBQUNGLElBQUk4QixPQUFPO0FBQ3JEO0FBQ0EsU0FBU0ssV0FBV0MsTUFBTTtJQUN4QixPQUFPRixFQUFFRTtBQUNYO0FBQ0EsTUFBTUMsc0JBQXNCRjtBQUsxQixDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanM/MmI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogODI5MCwgNDogODI5MSwgNTogODI4OCwgNjogNjUyNzksIDc6IDgyODksIDg6IDExOTE1NSwgOTogMTE5MTU2LCBhOiAxMTkxNTcsIGI6IDExOTE1OCwgYzogMTE5MTU5LCBkOiAxMTkxNjAsIGU6IDExOTE2MSwgZjogMTE5MTYyIH0sIGMgPSB7IDA6IDgyMDMsIDE6IDgyMDQsIDI6IDgyMDUsIDM6IDY1Mjc5IH0sIHUgPSBuZXcgQXJyYXkoNCkuZmlsbChTdHJpbmcuZnJvbUNvZGVQb2ludChjWzBdKSkuam9pbihcIlwiKTtcbmZ1bmN0aW9uIEUodCkge1xuICBsZXQgZSA9IEpTT04uc3RyaW5naWZ5KHQpO1xuICByZXR1cm4gYCR7dX0ke0FycmF5LmZyb20oZSkubWFwKChyKSA9PiB7XG4gICAgbGV0IG4gPSByLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKG4gPiAyNTUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgQVNDSUkgZWRpdCBpbmZvIGNhbiBiZSBlbmNvZGVkLiBFcnJvciBhdHRlbXB0aW5nIHRvIGVuY29kZSAke2V9IG9uIGNoYXJhY3RlciAke3J9ICgke259KWApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKG4udG9TdHJpbmcoNCkucGFkU3RhcnQoNCwgXCIwXCIpKS5tYXAoKG8pID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KGNbb10pKS5qb2luKFwiXCIpO1xuICB9KS5qb2luKFwiXCIpfWA7XG59XG5mdW5jdGlvbiBJKHQpIHtcbiAgcmV0dXJuICFOdW1iZXIuaXNOYU4oTnVtYmVyKHQpKSB8fCAvW2Etel0vaS50ZXN0KHQpICYmICEvXFxkKyg/OlstOlxcL11cXGQrKXsyfSg/OlRcXGQrKD86Wy06XFwvXVxcZCspezEsMn0oXFwuXFxkKyk/Wj8pPy8udGVzdCh0KSA/ICExIDogISFEYXRlLnBhcnNlKHQpO1xufVxuZnVuY3Rpb24gVCh0KSB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh0LCB0LnN0YXJ0c1dpdGgoXCIvXCIpID8gXCJodHRwczovL2FjbWUuY29tXCIgOiB2b2lkIDApO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gQyh0LCBlLCByID0gXCJhdXRvXCIpIHtcbiAgcmV0dXJuIHIgPT09ICEwIHx8IHIgPT09IFwiYXV0b1wiICYmIChJKHQpIHx8IFQodCkpID8gdCA6IGAke3R9JHtFKGUpfWA7XG59XG5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYykubWFwKCh0KSA9PiB0LnJldmVyc2UoKSkpO1xuT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHMpLm1hcCgodCkgPT4gdC5yZXZlcnNlKCkpKTtcbnZhciBTID0gYCR7T2JqZWN0LnZhbHVlcyhzKS5tYXAoKHQpID0+IGBcXFxcdXske3QudG9TdHJpbmcoMTYpfX1gKS5qb2luKFwiXCIpfWAsIGYgPSBuZXcgUmVnRXhwKGBbJHtTfV17NCx9YCwgXCJndVwiKTtcbmZ1bmN0aW9uIF8odCkge1xuICB2YXIgZTtcbiAgcmV0dXJuIHsgY2xlYW5lZDogdC5yZXBsYWNlKGYsIFwiXCIpLCBlbmNvZGVkOiAoKGUgPSB0Lm1hdGNoKGYpKSA9PSBudWxsID8gdm9pZCAwIDogZVswXSkgfHwgXCJcIiB9O1xufVxuZnVuY3Rpb24gTyh0KSB7XG4gIHJldHVybiB0ICYmIEpTT04ucGFyc2UoXyhKU09OLnN0cmluZ2lmeSh0KSkuY2xlYW5lZCk7XG59XG5mdW5jdGlvbiBzdGVnYUNsZWFuKHJlc3VsdCkge1xuICByZXR1cm4gTyhyZXN1bHQpO1xufVxuY29uc3QgdmVyY2VsU3RlZ2FDbGVhbkFsbCA9IHN0ZWdhQ2xlYW47XG5leHBvcnQge1xuICBDLFxuICBzdGVnYUNsZWFuLFxuICB2ZXJjZWxTdGVnYUNsZWFuQWxsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RlZ2FDbGVhbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJzIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwidSIsIkFycmF5IiwiZmlsbCIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJqb2luIiwiRSIsInQiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbSIsIm1hcCIsInIiLCJuIiwiY2hhckNvZGVBdCIsIkVycm9yIiwidG9TdHJpbmciLCJwYWRTdGFydCIsIm8iLCJJIiwiTnVtYmVyIiwiaXNOYU4iLCJ0ZXN0IiwiRGF0ZSIsInBhcnNlIiwiVCIsIlVSTCIsInN0YXJ0c1dpdGgiLCJDIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwicmV2ZXJzZSIsIlMiLCJ2YWx1ZXMiLCJSZWdFeHAiLCJfIiwiY2xlYW5lZCIsInJlcGxhY2UiLCJlbmNvZGVkIiwibWF0Y2giLCJPIiwic3RlZ2FDbGVhbiIsInJlc3VsdCIsInZlcmNlbFN0ZWdhQ2xlYW5BbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) throw new Error(\"Path is not an array\");\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") return `${target}[${segment}]`;\n        if (segmentType === \"string\") return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n        if (isKeySegment(segment) && segment._key) return `${target}[_key==\"${segment._key}\"]`;\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return `${target}[${from}:${to}]`;\n        }\n        throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": `\n`,\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return `$${path.map((segment)=>typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match)=>ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n    const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    for(; (match = parseRe.exec(path)) !== null;){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>UNESCAPE[m]);\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>UNESCAPE[m]);\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._key !== \"\") return {\n            _key: segment._key\n        };\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n        if (segment._index !== -1) return segment._index;\n        throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!csm?.mappings) return;\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) return {\n        mapping: csm.mappings[resultMappingPath],\n        matchedPath: resultMappingPath,\n        pathSuffix: \"\"\n    };\n    const mappings = Object.entries(csm.mappings).filter(([key])=>resultMappingPath.startsWith(key)).sort(([key1], [key2])=>key2.length - key1.length);\n    if (mappings.length == 0) return;\n    const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n    if (isArray(value)) return value.map((v, idx)=>{\n        if (isRecord(v)) {\n            const _key = v._key;\n            if (typeof _key == \"string\") return walkMap(v, mappingFn, path.concat({\n                _key,\n                _index: idx\n            }));\n        }\n        return walkMap(v, mappingFn, path.concat(idx));\n    });\n    if (isRecord(value)) {\n        if (value._type === \"block\" || value._type === \"span\") {\n            const result = {\n                ...value\n            };\n            return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n        }\n        return Object.fromEntries(Object.entries(value).map(([k, v])=>[\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ]));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value != \"string\") return value;\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) return value;\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\") return value;\n        const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    return id.startsWith(DRAFTS_PREFIX) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path, projectId, dataset } = options;\n    if (!baseUrl) throw new Error(\"baseUrl is required\");\n    if (!path) throw new Error(\"path is required\");\n    if (!_id) throw new Error(\"id is required\");\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n    const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), _id.startsWith(DRAFTS_PREFIX) && searchParams.set(\"isDraft\", \"\");\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    workspace && segments.push(workspace);\n    const routerParams = [\n        \"mode=presentation\",\n        `id=${id}`,\n        `type=${type}`,\n        `path=${encodeURIComponent(stringifiedPath)}`\n    ];\n    return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n    return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? {\n        baseUrl\n    } : {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = ({ sourcePath, resultPath, value })=>{\n    if (isValidDate(value) || isValidURL(value)) return !1;\n    const endPath = sourcePath.at(-1);\n    return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\") || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"textTheme\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction hasTypeLike(path) {\n    return path.some((segment)=>typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    if (!resultSourceMap) return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n        result,\n        resultSourceMap,\n        config\n    }), result;\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        throw logger?.error?.(`[@sanity/client]: ${msg}`, {\n            result,\n            resultSourceMap,\n            config\n        }), new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    }, resultWithStega = encodeIntoResult(result, resultSourceMap, ({ sourcePath, sourceDocument, resultPath, value })=>{\n        if ((typeof filter == \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === !1) return logger && report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        }), value;\n        logger && report.encoded.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n            length: value.length\n        });\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n        return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath,\n                ...!config.omitCrossDatasetReferenceData && {\n                    dataset,\n                    projectId\n                }\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        !1);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n        if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(`[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`)), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped)skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            logger?.log?.(\"[@sanity/client]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        (isSkipping || isEncoding) && logger?.groupEnd?.();\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ })

};
;