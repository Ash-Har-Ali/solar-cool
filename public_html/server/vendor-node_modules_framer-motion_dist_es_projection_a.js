"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-node_modules_framer-motion_dist_es_projection_a";
exports.ids = ["vendor-node_modules_framer-motion_dist_es_projection_a"];
exports.modules = {

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mixValues: () => (/* binding */ mixValues)\n/* harmony export */ });\n/* harmony import */ var motion_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! motion-utils */ \"(ssr)/./node_modules/motion-utils/dist/es/index.mjs\");\n/* harmony import */ var _easing_circ_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../easing/circ.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/circ.mjs\");\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\n\n\n\nconst borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nconst numBorders = borders.length;\nconst asNumber = (value)=>typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value)=>typeof value === \"number\" || _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(0, // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(let i = 0; i < numBorders; i++){\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max((0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.test(leadRadius) || _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, _easing_circ_mjs__WEBPACK_IMPORTED_MODULE_3__.circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, motion_utils__WEBPACK_IMPORTED_MODULE_0__.noop);\nfunction compress(min, max, easing) {\n    return (p)=>{\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing((0,motion_utils__WEBPACK_IMPORTED_MODULE_0__.progress)(min, max, p));\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertBoundingBoxToBox: () => (/* binding */ convertBoundingBoxToBox),\n/* harmony export */   convertBoxToBoundingBox: () => (/* binding */ convertBoxToBoundingBox),\n/* harmony export */   transformBoxPoints: () => (/* binding */ transformBoxPoints)\n/* harmony export */ });\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox({ top, left, right, bottom }) {\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    const topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    const bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QixFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7SUFDMUQsT0FBTztRQUNIQyxHQUFHO1lBQUVDLEtBQUtKO1lBQU1LLEtBQUtKO1FBQU07UUFDM0JLLEdBQUc7WUFBRUYsS0FBS0w7WUFBS00sS0FBS0g7UUFBTztJQUMvQjtBQUNKO0FBQ0EsU0FBU0ssd0JBQXdCLEVBQUVKLENBQUMsRUFBRUcsQ0FBQyxFQUFFO0lBQ3JDLE9BQU87UUFBRVAsS0FBS08sRUFBRUYsR0FBRztRQUFFSCxPQUFPRSxFQUFFRSxHQUFHO1FBQUVILFFBQVFJLEVBQUVELEdBQUc7UUFBRUwsTUFBTUcsRUFBRUMsR0FBRztJQUFDO0FBQ2xFO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNJLG1CQUFtQkMsS0FBSyxFQUFFQyxjQUFjO0lBQzdDLElBQUksQ0FBQ0EsZ0JBQ0QsT0FBT0Q7SUFDWCxNQUFNRSxVQUFVRCxlQUFlO1FBQUVQLEdBQUdNLE1BQU1ULElBQUk7UUFBRU0sR0FBR0csTUFBTVYsR0FBRztJQUFDO0lBQzdELE1BQU1hLGNBQWNGLGVBQWU7UUFBRVAsR0FBR00sTUFBTVIsS0FBSztRQUFFSyxHQUFHRyxNQUFNUCxNQUFNO0lBQUM7SUFDckUsT0FBTztRQUNISCxLQUFLWSxRQUFRTCxDQUFDO1FBQ2ROLE1BQU1XLFFBQVFSLENBQUM7UUFDZkQsUUFBUVUsWUFBWU4sQ0FBQztRQUNyQkwsT0FBT1csWUFBWVQsQ0FBQztJQUN4QjtBQUNKO0FBRWdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcz80ZDZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQm91bmRpbmcgYm94ZXMgdGVuZCB0byBiZSBkZWZpbmVkIGFzIHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbS4gRm9yIHZhcmlvdXMgb3BlcmF0aW9uc1xuICogaXQncyBlYXNpZXIgdG8gY29uc2lkZXIgZWFjaCBheGlzIGluZGl2aWR1YWxseS4gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgYm91bmRpbmcgYm94XG4gKiBhcyBhIG1hcCBvZiBzaW5nbGUtYXhpcyBtaW4vbWF4IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gY29udmVydEJvdW5kaW5nQm94VG9Cb3goeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB7IG1pbjogbGVmdCwgbWF4OiByaWdodCB9LFxuICAgICAgICB5OiB7IG1pbjogdG9wLCBtYXg6IGJvdHRvbSB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCh7IHgsIHkgfSkge1xuICAgIHJldHVybiB7IHRvcDogeS5taW4sIHJpZ2h0OiB4Lm1heCwgYm90dG9tOiB5Lm1heCwgbGVmdDogeC5taW4gfTtcbn1cbi8qKlxuICogQXBwbGllcyBhIFRyYW5zZm9ybVBvaW50IGZ1bmN0aW9uIHRvIGEgYm91bmRpbmcgYm94LiBUcmFuc2Zvcm1Qb2ludCBpcyB1c3VhbGx5IGEgZnVuY3Rpb25cbiAqIHByb3ZpZGVkIGJ5IEZyYW1lciB0byBhbGxvdyBtZWFzdXJlZCBwb2ludHMgdG8gYmUgY29ycmVjdGVkIGZvciBkZXZpY2Ugc2NhbGluZy4gVGhpcyBpcyB1c2VkXG4gKiB3aGVuIG1lYXN1cmluZyBET00gZWxlbWVudHMgYW5kIERPTSBldmVudCBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveFBvaW50cyhwb2ludCwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICBpZiAoIXRyYW5zZm9ybVBvaW50KVxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgY29uc3QgdG9wTGVmdCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQubGVmdCwgeTogcG9pbnQudG9wIH0pO1xuICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gdHJhbnNmb3JtUG9pbnQoeyB4OiBwb2ludC5yaWdodCwgeTogcG9pbnQuYm90dG9tIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wTGVmdC55LFxuICAgICAgICBsZWZ0OiB0b3BMZWZ0LngsXG4gICAgICAgIGJvdHRvbTogYm90dG9tUmlnaHQueSxcbiAgICAgICAgcmlnaHQ6IGJvdHRvbVJpZ2h0LngsXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY29udmVydEJvdW5kaW5nQm94VG9Cb3gsIGNvbnZlcnRCb3hUb0JvdW5kaW5nQm94LCB0cmFuc2Zvcm1Cb3hQb2ludHMgfTtcbiJdLCJuYW1lcyI6WyJjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCIsInRvcCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsIngiLCJtaW4iLCJtYXgiLCJ5IiwiY29udmVydEJveFRvQm91bmRpbmdCb3giLCJ0cmFuc2Zvcm1Cb3hQb2ludHMiLCJwb2ludCIsInRyYW5zZm9ybVBvaW50IiwidG9wTGVmdCIsImJvdHRvbVJpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyAxisDeltaInto: () => (/* binding */ copyAxisDeltaInto),\n/* harmony export */   copyAxisInto: () => (/* binding */ copyAxisInto),\n/* harmony export */   copyBoxInto: () => (/* binding */ copyBoxInto)\n/* harmony export */ });\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29weS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNELFNBQVNBLGFBQWFDLElBQUksRUFBRUMsVUFBVTtJQUNsQ0QsS0FBS0UsR0FBRyxHQUFHRCxXQUFXQyxHQUFHO0lBQ3pCRixLQUFLRyxHQUFHLEdBQUdGLFdBQVdFLEdBQUc7QUFDN0I7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU0MsWUFBWUMsR0FBRyxFQUFFQyxTQUFTO0lBQy9CUCxhQUFhTSxJQUFJRSxDQUFDLEVBQUVELFVBQVVDLENBQUM7SUFDL0JSLGFBQWFNLElBQUlHLENBQUMsRUFBRUYsVUFBVUUsQ0FBQztBQUNuQztBQUNBOzs7O0NBSUMsR0FDRCxTQUFTQyxrQkFBa0JDLEtBQUssRUFBRUMsV0FBVztJQUN6Q0QsTUFBTUUsU0FBUyxHQUFHRCxZQUFZQyxTQUFTO0lBQ3ZDRixNQUFNRyxLQUFLLEdBQUdGLFlBQVlFLEtBQUs7SUFDL0JILE1BQU1JLFdBQVcsR0FBR0gsWUFBWUcsV0FBVztJQUMzQ0osTUFBTUssTUFBTSxHQUFHSixZQUFZSSxNQUFNO0FBQ3JDO0FBRXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb3B5Lm1qcz9jNDcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVzZXQgYW4gYXhpcyB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5QXhpc0ludG8oYXhpcywgb3JpZ2luQXhpcykge1xuICAgIGF4aXMubWluID0gb3JpZ2luQXhpcy5taW47XG4gICAgYXhpcy5tYXggPSBvcmlnaW5BeGlzLm1heDtcbn1cbi8qKlxuICogUmVzZXQgYSBib3ggdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29weUJveEludG8oYm94LCBvcmlnaW5Cb3gpIHtcbiAgICBjb3B5QXhpc0ludG8oYm94LngsIG9yaWdpbkJveC54KTtcbiAgICBjb3B5QXhpc0ludG8oYm94LnksIG9yaWdpbkJveC55KTtcbn1cbi8qKlxuICogUmVzZXQgYSBkZWx0YSB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5QXhpc0RlbHRhSW50byhkZWx0YSwgb3JpZ2luRGVsdGEpIHtcbiAgICBkZWx0YS50cmFuc2xhdGUgPSBvcmlnaW5EZWx0YS50cmFuc2xhdGU7XG4gICAgZGVsdGEuc2NhbGUgPSBvcmlnaW5EZWx0YS5zY2FsZTtcbiAgICBkZWx0YS5vcmlnaW5Qb2ludCA9IG9yaWdpbkRlbHRhLm9yaWdpblBvaW50O1xuICAgIGRlbHRhLm9yaWdpbiA9IG9yaWdpbkRlbHRhLm9yaWdpbjtcbn1cblxuZXhwb3J0IHsgY29weUF4aXNEZWx0YUludG8sIGNvcHlBeGlzSW50bywgY29weUJveEludG8gfTtcbiJdLCJuYW1lcyI6WyJjb3B5QXhpc0ludG8iLCJheGlzIiwib3JpZ2luQXhpcyIsIm1pbiIsIm1heCIsImNvcHlCb3hJbnRvIiwiYm94Iiwib3JpZ2luQm94IiwieCIsInkiLCJjb3B5QXhpc0RlbHRhSW50byIsImRlbHRhIiwib3JpZ2luRGVsdGEiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsIm9yaWdpblBvaW50Iiwib3JpZ2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAxisDelta: () => (/* binding */ applyAxisDelta),\n/* harmony export */   applyBoxDelta: () => (/* binding */ applyBoxDelta),\n/* harmony export */   applyPointDelta: () => (/* binding */ applyPointDelta),\n/* harmony export */   applyTreeDeltas: () => (/* binding */ applyTreeDeltas),\n/* harmony export */   scalePoint: () => (/* binding */ scalePoint),\n/* harmony export */   transformAxis: () => (/* binding */ transformAxis),\n/* harmony export */   transformBox: () => (/* binding */ transformBox),\n/* harmony export */   translateAxis: () => (/* binding */ translateAxis)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n\n\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for(let i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */ const { visualElement } = node.options;\n        if (visualElement && visualElement.props.style && visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.hasTransform)(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */ if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_1__.mixNumber)(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcAxisDelta: () => (/* binding */ calcAxisDelta),\n/* harmony export */   calcBoxDelta: () => (/* binding */ calcBoxDelta),\n/* harmony export */   calcLength: () => (/* binding */ calcLength),\n/* harmony export */   calcRelativeAxis: () => (/* binding */ calcRelativeAxis),\n/* harmony export */   calcRelativeAxisPosition: () => (/* binding */ calcRelativeAxisPosition),\n/* harmony export */   calcRelativeBox: () => (/* binding */ calcRelativeBox),\n/* harmony export */   calcRelativePosition: () => (/* binding */ calcRelativePosition),\n/* harmony export */   isNear: () => (/* binding */ isNear)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_0__.mixNumber)(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_0__.mixNumber)(target.min, target.max, delta.origin) - delta.originPoint;\n    if (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX || isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX || isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXVEO0FBRXZELE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxZQUFZLElBQUlEO0FBQ3RCLE1BQU1FLFlBQVksSUFBSUY7QUFDdEIsTUFBTUcsc0JBQXNCO0FBQzVCLE1BQU1DLGdCQUFnQixJQUFJRDtBQUMxQixNQUFNRSxnQkFBZ0IsSUFBSUY7QUFDMUIsU0FBU0csV0FBV0MsSUFBSTtJQUNwQixPQUFPQSxLQUFLQyxHQUFHLEdBQUdELEtBQUtFLEdBQUc7QUFDOUI7QUFDQSxTQUFTQyxPQUFPQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsV0FBVztJQUN0QyxPQUFPQyxLQUFLQyxHQUFHLENBQUNKLFFBQVFDLFdBQVdDO0FBQ3ZDO0FBQ0EsU0FBU0csY0FBY0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVOLE1BQU0sRUFBRU8sU0FBUyxHQUFHO0lBQ3RERixNQUFNRSxNQUFNLEdBQUdBO0lBQ2ZGLE1BQU1HLFdBQVcsR0FBR3JCLGdFQUFTQSxDQUFDbUIsT0FBT1QsR0FBRyxFQUFFUyxPQUFPVixHQUFHLEVBQUVTLE1BQU1FLE1BQU07SUFDbEVGLE1BQU1JLEtBQUssR0FBR2YsV0FBV00sVUFBVU4sV0FBV1k7SUFDOUNELE1BQU1LLFNBQVMsR0FDWHZCLGdFQUFTQSxDQUFDYSxPQUFPSCxHQUFHLEVBQUVHLE9BQU9KLEdBQUcsRUFBRVMsTUFBTUUsTUFBTSxJQUFJRixNQUFNRyxXQUFXO0lBQ3ZFLElBQUksTUFBT0MsS0FBSyxJQUFJcEIsYUFBYWdCLE1BQU1JLEtBQUssSUFBSW5CLGFBQzVDcUIsTUFBTU4sTUFBTUksS0FBSyxHQUFHO1FBQ3BCSixNQUFNSSxLQUFLLEdBQUc7SUFDbEI7SUFDQSxJQUFJLE1BQU9DLFNBQVMsSUFBSWxCLGlCQUNwQmEsTUFBTUssU0FBUyxJQUFJakIsaUJBQ25Ca0IsTUFBTU4sTUFBTUssU0FBUyxHQUFHO1FBQ3hCTCxNQUFNSyxTQUFTLEdBQUc7SUFDdEI7QUFDSjtBQUNBLFNBQVNFLGFBQWFQLEtBQUssRUFBRUMsTUFBTSxFQUFFTixNQUFNLEVBQUVPLE1BQU07SUFDL0NILGNBQWNDLE1BQU1RLENBQUMsRUFBRVAsT0FBT08sQ0FBQyxFQUFFYixPQUFPYSxDQUFDLEVBQUVOLFNBQVNBLE9BQU9PLE9BQU8sR0FBR0M7SUFDckVYLGNBQWNDLE1BQU1XLENBQUMsRUFBRVYsT0FBT1UsQ0FBQyxFQUFFaEIsT0FBT2dCLENBQUMsRUFBRVQsU0FBU0EsT0FBT1UsT0FBTyxHQUFHRjtBQUN6RTtBQUNBLFNBQVNHLGlCQUFpQmxCLE1BQU0sRUFBRW1CLFFBQVEsRUFBRUMsTUFBTTtJQUM5Q3BCLE9BQU9ILEdBQUcsR0FBR3VCLE9BQU92QixHQUFHLEdBQUdzQixTQUFTdEIsR0FBRztJQUN0Q0csT0FBT0osR0FBRyxHQUFHSSxPQUFPSCxHQUFHLEdBQUdILFdBQVd5QjtBQUN6QztBQUNBLFNBQVNFLGdCQUFnQnJCLE1BQU0sRUFBRW1CLFFBQVEsRUFBRUMsTUFBTTtJQUM3Q0YsaUJBQWlCbEIsT0FBT2EsQ0FBQyxFQUFFTSxTQUFTTixDQUFDLEVBQUVPLE9BQU9QLENBQUM7SUFDL0NLLGlCQUFpQmxCLE9BQU9nQixDQUFDLEVBQUVHLFNBQVNILENBQUMsRUFBRUksT0FBT0osQ0FBQztBQUNuRDtBQUNBLFNBQVNNLHlCQUF5QnRCLE1BQU0sRUFBRXVCLE1BQU0sRUFBRUgsTUFBTTtJQUNwRHBCLE9BQU9ILEdBQUcsR0FBRzBCLE9BQU8xQixHQUFHLEdBQUd1QixPQUFPdkIsR0FBRztJQUNwQ0csT0FBT0osR0FBRyxHQUFHSSxPQUFPSCxHQUFHLEdBQUdILFdBQVc2QjtBQUN6QztBQUNBLFNBQVNDLHFCQUFxQnhCLE1BQU0sRUFBRXVCLE1BQU0sRUFBRUgsTUFBTTtJQUNoREUseUJBQXlCdEIsT0FBT2EsQ0FBQyxFQUFFVSxPQUFPVixDQUFDLEVBQUVPLE9BQU9QLENBQUM7SUFDckRTLHlCQUF5QnRCLE9BQU9nQixDQUFDLEVBQUVPLE9BQU9QLENBQUMsRUFBRUksT0FBT0osQ0FBQztBQUN6RDtBQUU4SSIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanM/OTdhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXhOdW1iZXIgfSBmcm9tICcuLi8uLi91dGlscy9taXgvbnVtYmVyLm1qcyc7XG5cbmNvbnN0IFNDQUxFX1BSRUNJU0lPTiA9IDAuMDAwMTtcbmNvbnN0IFNDQUxFX01JTiA9IDEgLSBTQ0FMRV9QUkVDSVNJT047XG5jb25zdCBTQ0FMRV9NQVggPSAxICsgU0NBTEVfUFJFQ0lTSU9OO1xuY29uc3QgVFJBTlNMQVRFX1BSRUNJU0lPTiA9IDAuMDE7XG5jb25zdCBUUkFOU0xBVEVfTUlOID0gMCAtIFRSQU5TTEFURV9QUkVDSVNJT047XG5jb25zdCBUUkFOU0xBVEVfTUFYID0gMCArIFRSQU5TTEFURV9QUkVDSVNJT047XG5mdW5jdGlvbiBjYWxjTGVuZ3RoKGF4aXMpIHtcbiAgICByZXR1cm4gYXhpcy5tYXggLSBheGlzLm1pbjtcbn1cbmZ1bmN0aW9uIGlzTmVhcih2YWx1ZSwgdGFyZ2V0LCBtYXhEaXN0YW5jZSkge1xuICAgIHJldHVybiBNYXRoLmFicyh2YWx1ZSAtIHRhcmdldCkgPD0gbWF4RGlzdGFuY2U7XG59XG5mdW5jdGlvbiBjYWxjQXhpc0RlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luID0gMC41KSB7XG4gICAgZGVsdGEub3JpZ2luID0gb3JpZ2luO1xuICAgIGRlbHRhLm9yaWdpblBvaW50ID0gbWl4TnVtYmVyKHNvdXJjZS5taW4sIHNvdXJjZS5tYXgsIGRlbHRhLm9yaWdpbik7XG4gICAgZGVsdGEuc2NhbGUgPSBjYWxjTGVuZ3RoKHRhcmdldCkgLyBjYWxjTGVuZ3RoKHNvdXJjZSk7XG4gICAgZGVsdGEudHJhbnNsYXRlID1cbiAgICAgICAgbWl4TnVtYmVyKHRhcmdldC5taW4sIHRhcmdldC5tYXgsIGRlbHRhLm9yaWdpbikgLSBkZWx0YS5vcmlnaW5Qb2ludDtcbiAgICBpZiAoKGRlbHRhLnNjYWxlID49IFNDQUxFX01JTiAmJiBkZWx0YS5zY2FsZSA8PSBTQ0FMRV9NQVgpIHx8XG4gICAgICAgIGlzTmFOKGRlbHRhLnNjYWxlKSkge1xuICAgICAgICBkZWx0YS5zY2FsZSA9IDEuMDtcbiAgICB9XG4gICAgaWYgKChkZWx0YS50cmFuc2xhdGUgPj0gVFJBTlNMQVRFX01JTiAmJlxuICAgICAgICBkZWx0YS50cmFuc2xhdGUgPD0gVFJBTlNMQVRFX01BWCkgfHxcbiAgICAgICAgaXNOYU4oZGVsdGEudHJhbnNsYXRlKSkge1xuICAgICAgICBkZWx0YS50cmFuc2xhdGUgPSAwLjA7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY0JveERlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS54LCBzb3VyY2UueCwgdGFyZ2V0LngsIG9yaWdpbiA/IG9yaWdpbi5vcmlnaW5YIDogdW5kZWZpbmVkKTtcbiAgICBjYWxjQXhpc0RlbHRhKGRlbHRhLnksIHNvdXJjZS55LCB0YXJnZXQueSwgb3JpZ2luID8gb3JpZ2luLm9yaWdpblkgOiB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gcGFyZW50Lm1pbiArIHJlbGF0aXZlLm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgocmVsYXRpdmUpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQm94KHRhcmdldCwgcmVsYXRpdmUsIHBhcmVudCkge1xuICAgIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LngsIHJlbGF0aXZlLngsIHBhcmVudC54KTtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC55LCByZWxhdGl2ZS55LCBwYXJlbnQueSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LCBsYXlvdXQsIHBhcmVudCkge1xuICAgIHRhcmdldC5taW4gPSBsYXlvdXQubWluIC0gcGFyZW50Lm1pbjtcbiAgICB0YXJnZXQubWF4ID0gdGFyZ2V0Lm1pbiArIGNhbGNMZW5ndGgobGF5b3V0KTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZVBvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LngsIGxheW91dC54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC55LCBsYXlvdXQueSwgcGFyZW50LnkpO1xufVxuXG5leHBvcnQgeyBjYWxjQXhpc0RlbHRhLCBjYWxjQm94RGVsdGEsIGNhbGNMZW5ndGgsIGNhbGNSZWxhdGl2ZUF4aXMsIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbiwgY2FsY1JlbGF0aXZlQm94LCBjYWxjUmVsYXRpdmVQb3NpdGlvbiwgaXNOZWFyIH07XG4iXSwibmFtZXMiOlsibWl4TnVtYmVyIiwiU0NBTEVfUFJFQ0lTSU9OIiwiU0NBTEVfTUlOIiwiU0NBTEVfTUFYIiwiVFJBTlNMQVRFX1BSRUNJU0lPTiIsIlRSQU5TTEFURV9NSU4iLCJUUkFOU0xBVEVfTUFYIiwiY2FsY0xlbmd0aCIsImF4aXMiLCJtYXgiLCJtaW4iLCJpc05lYXIiLCJ2YWx1ZSIsInRhcmdldCIsIm1heERpc3RhbmNlIiwiTWF0aCIsImFicyIsImNhbGNBeGlzRGVsdGEiLCJkZWx0YSIsInNvdXJjZSIsIm9yaWdpbiIsIm9yaWdpblBvaW50Iiwic2NhbGUiLCJ0cmFuc2xhdGUiLCJpc05hTiIsImNhbGNCb3hEZWx0YSIsIngiLCJvcmlnaW5YIiwidW5kZWZpbmVkIiwieSIsIm9yaWdpblkiLCJjYWxjUmVsYXRpdmVBeGlzIiwicmVsYXRpdmUiLCJwYXJlbnQiLCJjYWxjUmVsYXRpdmVCb3giLCJjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24iLCJsYXlvdXQiLCJjYWxjUmVsYXRpdmVQb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeAxisDelta: () => (/* binding */ removeAxisDelta),\n/* harmony export */   removeAxisTransforms: () => (/* binding */ removeAxisTransforms),\n/* harmony export */   removeBoxTransforms: () => (/* binding */ removeBoxTransforms),\n/* harmony export */   removePointDelta: () => (/* binding */ removePointDelta)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    let originPoint = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_2__.mixNumber)(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXVEO0FBQ087QUFDZjtBQUUvQzs7Q0FFQyxHQUNELFNBQVNHLGlCQUFpQkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxRQUFRO0lBQ3BFSixTQUFTQztJQUNURCxRQUFRRiw0REFBVUEsQ0FBQ0UsT0FBTyxJQUFJRSxPQUFPQztJQUNyQyxJQUFJQyxhQUFhQyxXQUFXO1FBQ3hCTCxRQUFRRiw0REFBVUEsQ0FBQ0UsT0FBTyxJQUFJSSxVQUFVRDtJQUM1QztJQUNBLE9BQU9IO0FBQ1g7QUFDQTs7Q0FFQyxHQUNELFNBQVNNLGdCQUFnQkMsSUFBSSxFQUFFTixZQUFZLENBQUMsRUFBRUMsUUFBUSxDQUFDLEVBQUVNLFNBQVMsR0FBRyxFQUFFSixRQUFRLEVBQUVLLGFBQWFGLElBQUksRUFBRUcsYUFBYUgsSUFBSTtJQUNqSCxJQUFJVixtRUFBT0EsQ0FBQ2MsSUFBSSxDQUFDVixZQUFZO1FBQ3pCQSxZQUFZVyxXQUFXWDtRQUN2QixNQUFNWSxtQkFBbUJqQixnRUFBU0EsQ0FBQ2MsV0FBV0ksR0FBRyxFQUFFSixXQUFXSyxHQUFHLEVBQUVkLFlBQVk7UUFDL0VBLFlBQVlZLG1CQUFtQkgsV0FBV0ksR0FBRztJQUNqRDtJQUNBLElBQUksT0FBT2IsY0FBYyxVQUNyQjtJQUNKLElBQUlFLGNBQWNQLGdFQUFTQSxDQUFDYSxXQUFXSyxHQUFHLEVBQUVMLFdBQVdNLEdBQUcsRUFBRVA7SUFDNUQsSUFBSUQsU0FBU0UsWUFDVE4sZUFBZUY7SUFDbkJNLEtBQUtPLEdBQUcsR0FBR2YsaUJBQWlCUSxLQUFLTyxHQUFHLEVBQUViLFdBQVdDLE9BQU9DLGFBQWFDO0lBQ3JFRyxLQUFLUSxHQUFHLEdBQUdoQixpQkFBaUJRLEtBQUtRLEdBQUcsRUFBRWQsV0FBV0MsT0FBT0MsYUFBYUM7QUFDekU7QUFDQTs7O0NBR0MsR0FDRCxTQUFTWSxxQkFBcUJULElBQUksRUFBRVUsVUFBVSxFQUFFLENBQUNDLEtBQUtDLFVBQVVDLFVBQVUsRUFBRVosTUFBTSxFQUFFRSxVQUFVO0lBQzFGSixnQkFBZ0JDLE1BQU1VLFVBQVUsQ0FBQ0MsSUFBSSxFQUFFRCxVQUFVLENBQUNFLFNBQVMsRUFBRUYsVUFBVSxDQUFDRyxVQUFVLEVBQUVILFdBQVdmLEtBQUssRUFBRU0sUUFBUUU7QUFDbEg7QUFDQTs7Q0FFQyxHQUNELE1BQU1XLFFBQVE7SUFBQztJQUFLO0lBQVU7Q0FBVTtBQUN4QyxNQUFNQyxRQUFRO0lBQUM7SUFBSztJQUFVO0NBQVU7QUFDeEM7OztDQUdDLEdBQ0QsU0FBU0Msb0JBQW9CQyxHQUFHLEVBQUVQLFVBQVUsRUFBRVEsU0FBUyxFQUFFQyxTQUFTO0lBQzlEVixxQkFBcUJRLElBQUlHLENBQUMsRUFBRVYsWUFBWUksT0FBT0ksWUFBWUEsVUFBVUUsQ0FBQyxHQUFHdEIsV0FBV3FCLFlBQVlBLFVBQVVDLENBQUMsR0FBR3RCO0lBQzlHVyxxQkFBcUJRLElBQUlJLENBQUMsRUFBRVgsWUFBWUssT0FBT0csWUFBWUEsVUFBVUcsQ0FBQyxHQUFHdkIsV0FBV3FCLFlBQVlBLFVBQVVFLENBQUMsR0FBR3ZCO0FBQ2xIO0FBRXdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9kZWx0YS1yZW1vdmUubWpzPzQwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWl4TnVtYmVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4L251bWJlci5tanMnO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IHNjYWxlUG9pbnQgfSBmcm9tICcuL2RlbHRhLWFwcGx5Lm1qcyc7XG5cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhIHBvaW50LiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseVBvaW50RGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBwb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgcG9pbnQgPSBzY2FsZVBvaW50KHBvaW50LCAxIC8gc2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBib3hTY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnQ7XG59XG4vKipcbiAqIFJlbW92ZSBhIGRlbHRhIGZyb20gYW4gYXhpcy4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzRGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlID0gMCwgc2NhbGUgPSAxLCBvcmlnaW4gPSAwLjUsIGJveFNjYWxlLCBvcmlnaW5BeGlzID0gYXhpcywgc291cmNlQXhpcyA9IGF4aXMpIHtcbiAgICBpZiAocGVyY2VudC50ZXN0KHRyYW5zbGF0ZSkpIHtcbiAgICAgICAgdHJhbnNsYXRlID0gcGFyc2VGbG9hdCh0cmFuc2xhdGUpO1xuICAgICAgICBjb25zdCByZWxhdGl2ZVByb2dyZXNzID0gbWl4TnVtYmVyKHNvdXJjZUF4aXMubWluLCBzb3VyY2VBeGlzLm1heCwgdHJhbnNsYXRlIC8gMTAwKTtcbiAgICAgICAgdHJhbnNsYXRlID0gcmVsYXRpdmVQcm9ncmVzcyAtIHNvdXJjZUF4aXMubWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRyYW5zbGF0ZSAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBvcmlnaW5Qb2ludCA9IG1peE51bWJlcihvcmlnaW5BeGlzLm1pbiwgb3JpZ2luQXhpcy5tYXgsIG9yaWdpbik7XG4gICAgaWYgKGF4aXMgPT09IG9yaWdpbkF4aXMpXG4gICAgICAgIG9yaWdpblBvaW50IC09IHRyYW5zbGF0ZTtcbiAgICBheGlzLm1pbiA9IHJlbW92ZVBvaW50RGVsdGEoYXhpcy5taW4sIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSk7XG4gICAgYXhpcy5tYXggPSByZW1vdmVQb2ludERlbHRhKGF4aXMubWF4LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xufVxuLyoqXG4gKiBSZW1vdmUgYSB0cmFuc2Zvcm1zIGZyb20gYW4gYXhpcy4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzVHJhbnNmb3JtcyBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVBeGlzVHJhbnNmb3JtcyhheGlzLCB0cmFuc2Zvcm1zLCBba2V5LCBzY2FsZUtleSwgb3JpZ2luS2V5XSwgb3JpZ2luLCBzb3VyY2VBeGlzKSB7XG4gICAgcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIHRyYW5zZm9ybXNbb3JpZ2luS2V5XSwgdHJhbnNmb3Jtcy5zY2FsZSwgb3JpZ2luLCBzb3VyY2VBeGlzKTtcbn1cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBtb3Rpb24gdmFsdWVzIHdlIHdhbnQgdG8gYXBwbHkgYXMgdHJhbnNsYXRpb24sIHNjYWxlIGFuZCBvcmlnaW4uXG4gKi9cbmNvbnN0IHhLZXlzID0gW1wieFwiLCBcInNjYWxlWFwiLCBcIm9yaWdpblhcIl07XG5jb25zdCB5S2V5cyA9IFtcInlcIiwgXCJzY2FsZVlcIiwgXCJvcmlnaW5ZXCJdO1xuLyoqXG4gKiBSZW1vdmUgYSB0cmFuc2Zvcm1zIGZyb20gYW4gYm94LiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNCb3ggaW4gcmV2ZXJzZVxuICogYW5kIGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBtb3Rpb24gdmFsdWVzIGFuZCByZW1vdmVBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQm94VHJhbnNmb3Jtcyhib3gsIHRyYW5zZm9ybXMsIG9yaWdpbkJveCwgc291cmNlQm94KSB7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LngsIHRyYW5zZm9ybXMsIHhLZXlzLCBvcmlnaW5Cb3ggPyBvcmlnaW5Cb3gueCA6IHVuZGVmaW5lZCwgc291cmNlQm94ID8gc291cmNlQm94LnggOiB1bmRlZmluZWQpO1xuICAgIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGJveC55LCB0cmFuc2Zvcm1zLCB5S2V5cywgb3JpZ2luQm94ID8gb3JpZ2luQm94LnkgOiB1bmRlZmluZWQsIHNvdXJjZUJveCA/IHNvdXJjZUJveC55IDogdW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0IHsgcmVtb3ZlQXhpc0RlbHRhLCByZW1vdmVBeGlzVHJhbnNmb3JtcywgcmVtb3ZlQm94VHJhbnNmb3JtcywgcmVtb3ZlUG9pbnREZWx0YSB9O1xuIl0sIm5hbWVzIjpbIm1peE51bWJlciIsInBlcmNlbnQiLCJzY2FsZVBvaW50IiwicmVtb3ZlUG9pbnREZWx0YSIsInBvaW50IiwidHJhbnNsYXRlIiwic2NhbGUiLCJvcmlnaW5Qb2ludCIsImJveFNjYWxlIiwidW5kZWZpbmVkIiwicmVtb3ZlQXhpc0RlbHRhIiwiYXhpcyIsIm9yaWdpbiIsIm9yaWdpbkF4aXMiLCJzb3VyY2VBeGlzIiwidGVzdCIsInBhcnNlRmxvYXQiLCJyZWxhdGl2ZVByb2dyZXNzIiwibWluIiwibWF4IiwicmVtb3ZlQXhpc1RyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1zIiwia2V5Iiwic2NhbGVLZXkiLCJvcmlnaW5LZXkiLCJ4S2V5cyIsInlLZXlzIiwicmVtb3ZlQm94VHJhbnNmb3JtcyIsImJveCIsIm9yaWdpbkJveCIsInNvdXJjZUJveCIsIngiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/models.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAxis: () => (/* binding */ createAxis),\n/* harmony export */   createAxisDelta: () => (/* binding */ createAxisDelta),\n/* harmony export */   createBox: () => (/* binding */ createBox),\n/* harmony export */   createDelta: () => (/* binding */ createDelta)\n/* harmony export */ });\nconst createAxisDelta = ()=>({\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    });\nconst createDelta = ()=>({\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    });\nconst createAxis = ()=>({\n        min: 0,\n        max: 0\n    });\nconst createBox = ()=>({\n        x: createAxis(),\n        y: createAxis()\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsa0JBQWtCLElBQU87UUFDM0JDLFdBQVc7UUFDWEMsT0FBTztRQUNQQyxRQUFRO1FBQ1JDLGFBQWE7SUFDakI7QUFDQSxNQUFNQyxjQUFjLElBQU87UUFDdkJDLEdBQUdOO1FBQ0hPLEdBQUdQO0lBQ1A7QUFDQSxNQUFNUSxhQUFhLElBQU87UUFBRUMsS0FBSztRQUFHQyxLQUFLO0lBQUU7QUFDM0MsTUFBTUMsWUFBWSxJQUFPO1FBQ3JCTCxHQUFHRTtRQUNIRCxHQUFHQztJQUNQO0FBRStEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9tb2RlbHMubWpzPzM4YzQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlQXhpc0RlbHRhID0gKCkgPT4gKHtcbiAgICB0cmFuc2xhdGU6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgb3JpZ2luOiAwLFxuICAgIG9yaWdpblBvaW50OiAwLFxufSk7XG5jb25zdCBjcmVhdGVEZWx0YSA9ICgpID0+ICh7XG4gICAgeDogY3JlYXRlQXhpc0RlbHRhKCksXG4gICAgeTogY3JlYXRlQXhpc0RlbHRhKCksXG59KTtcbmNvbnN0IGNyZWF0ZUF4aXMgPSAoKSA9PiAoeyBtaW46IDAsIG1heDogMCB9KTtcbmNvbnN0IGNyZWF0ZUJveCA9ICgpID0+ICh7XG4gICAgeDogY3JlYXRlQXhpcygpLFxuICAgIHk6IGNyZWF0ZUF4aXMoKSxcbn0pO1xuXG5leHBvcnQgeyBjcmVhdGVBeGlzLCBjcmVhdGVBeGlzRGVsdGEsIGNyZWF0ZUJveCwgY3JlYXRlRGVsdGEgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVBeGlzRGVsdGEiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsIm9yaWdpbiIsIm9yaWdpblBvaW50IiwiY3JlYXRlRGVsdGEiLCJ4IiwieSIsImNyZWF0ZUF4aXMiLCJtaW4iLCJtYXgiLCJjcmVhdGVCb3giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aspectRatio: () => (/* binding */ aspectRatio),\n/* harmony export */   axisDeltaEquals: () => (/* binding */ axisDeltaEquals),\n/* harmony export */   axisEquals: () => (/* binding */ axisEquals),\n/* harmony export */   axisEqualsRounded: () => (/* binding */ axisEqualsRounded),\n/* harmony export */   boxEquals: () => (/* binding */ boxEquals),\n/* harmony export */   boxEqualsRounded: () => (/* binding */ boxEqualsRounded),\n/* harmony export */   isDeltaZero: () => (/* binding */ isDeltaZero)\n/* harmony export */ });\n/* harmony import */ var _delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return Math.round(a.min) === Math.round(b.min) && Math.round(a.max) === Math.round(b.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return (0,_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__.calcLength)(box.x) / (0,_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__.calcLength)(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return a.translate === b.translate && a.scale === b.scale && a.originPoint === b.originPoint;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQThDO0FBRTlDLFNBQVNDLGdCQUFnQkMsS0FBSztJQUMxQixPQUFPQSxNQUFNQyxTQUFTLEtBQUssS0FBS0QsTUFBTUUsS0FBSyxLQUFLO0FBQ3BEO0FBQ0EsU0FBU0MsWUFBWUgsS0FBSztJQUN0QixPQUFPRCxnQkFBZ0JDLE1BQU1JLENBQUMsS0FBS0wsZ0JBQWdCQyxNQUFNSyxDQUFDO0FBQzlEO0FBQ0EsU0FBU0MsV0FBV0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ3BCLE9BQU9ELEVBQUVFLEdBQUcsS0FBS0QsRUFBRUMsR0FBRyxJQUFJRixFQUFFRyxHQUFHLEtBQUtGLEVBQUVFLEdBQUc7QUFDN0M7QUFDQSxTQUFTQyxVQUFVSixDQUFDLEVBQUVDLENBQUM7SUFDbkIsT0FBT0YsV0FBV0MsRUFBRUgsQ0FBQyxFQUFFSSxFQUFFSixDQUFDLEtBQUtFLFdBQVdDLEVBQUVGLENBQUMsRUFBRUcsRUFBRUgsQ0FBQztBQUN0RDtBQUNBLFNBQVNPLGtCQUFrQkwsQ0FBQyxFQUFFQyxDQUFDO0lBQzNCLE9BQVFLLEtBQUtDLEtBQUssQ0FBQ1AsRUFBRUUsR0FBRyxNQUFNSSxLQUFLQyxLQUFLLENBQUNOLEVBQUVDLEdBQUcsS0FDMUNJLEtBQUtDLEtBQUssQ0FBQ1AsRUFBRUcsR0FBRyxNQUFNRyxLQUFLQyxLQUFLLENBQUNOLEVBQUVFLEdBQUc7QUFDOUM7QUFDQSxTQUFTSyxpQkFBaUJSLENBQUMsRUFBRUMsQ0FBQztJQUMxQixPQUFPSSxrQkFBa0JMLEVBQUVILENBQUMsRUFBRUksRUFBRUosQ0FBQyxLQUFLUSxrQkFBa0JMLEVBQUVGLENBQUMsRUFBRUcsRUFBRUgsQ0FBQztBQUNwRTtBQUNBLFNBQVNXLFlBQVlDLEdBQUc7SUFDcEIsT0FBT25CLDJEQUFVQSxDQUFDbUIsSUFBSWIsQ0FBQyxJQUFJTiwyREFBVUEsQ0FBQ21CLElBQUlaLENBQUM7QUFDL0M7QUFDQSxTQUFTYSxnQkFBZ0JYLENBQUMsRUFBRUMsQ0FBQztJQUN6QixPQUFRRCxFQUFFTixTQUFTLEtBQUtPLEVBQUVQLFNBQVMsSUFDL0JNLEVBQUVMLEtBQUssS0FBS00sRUFBRU4sS0FBSyxJQUNuQkssRUFBRVksV0FBVyxLQUFLWCxFQUFFVyxXQUFXO0FBQ3ZDO0FBRWlIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS91dGlscy5tanM/OGM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi9kZWx0YS1jYWxjLm1qcyc7XG5cbmZ1bmN0aW9uIGlzQXhpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBkZWx0YS50cmFuc2xhdGUgPT09IDAgJiYgZGVsdGEuc2NhbGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueCkgJiYgaXNBeGlzRGVsdGFaZXJvKGRlbHRhLnkpO1xufVxuZnVuY3Rpb24gYXhpc0VxdWFscyhhLCBiKSB7XG4gICAgcmV0dXJuIGEubWluID09PSBiLm1pbiAmJiBhLm1heCA9PT0gYi5tYXg7XG59XG5mdW5jdGlvbiBib3hFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiBheGlzRXF1YWxzKGEueCwgYi54KSAmJiBheGlzRXF1YWxzKGEueSwgYi55KTtcbn1cbmZ1bmN0aW9uIGF4aXNFcXVhbHNSb3VuZGVkKGEsIGIpIHtcbiAgICByZXR1cm4gKE1hdGgucm91bmQoYS5taW4pID09PSBNYXRoLnJvdW5kKGIubWluKSAmJlxuICAgICAgICBNYXRoLnJvdW5kKGEubWF4KSA9PT0gTWF0aC5yb3VuZChiLm1heCkpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzUm91bmRlZChhLCBiKSB7XG4gICAgcmV0dXJuIGF4aXNFcXVhbHNSb3VuZGVkKGEueCwgYi54KSAmJiBheGlzRXF1YWxzUm91bmRlZChhLnksIGIueSk7XG59XG5mdW5jdGlvbiBhc3BlY3RSYXRpbyhib3gpIHtcbiAgICByZXR1cm4gY2FsY0xlbmd0aChib3gueCkgLyBjYWxjTGVuZ3RoKGJveC55KTtcbn1cbmZ1bmN0aW9uIGF4aXNEZWx0YUVxdWFscyhhLCBiKSB7XG4gICAgcmV0dXJuIChhLnRyYW5zbGF0ZSA9PT0gYi50cmFuc2xhdGUgJiZcbiAgICAgICAgYS5zY2FsZSA9PT0gYi5zY2FsZSAmJlxuICAgICAgICBhLm9yaWdpblBvaW50ID09PSBiLm9yaWdpblBvaW50KTtcbn1cblxuZXhwb3J0IHsgYXNwZWN0UmF0aW8sIGF4aXNEZWx0YUVxdWFscywgYXhpc0VxdWFscywgYXhpc0VxdWFsc1JvdW5kZWQsIGJveEVxdWFscywgYm94RXF1YWxzUm91bmRlZCwgaXNEZWx0YVplcm8gfTtcbiJdLCJuYW1lcyI6WyJjYWxjTGVuZ3RoIiwiaXNBeGlzRGVsdGFaZXJvIiwiZGVsdGEiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsImlzRGVsdGFaZXJvIiwieCIsInkiLCJheGlzRXF1YWxzIiwiYSIsImIiLCJtaW4iLCJtYXgiLCJib3hFcXVhbHMiLCJheGlzRXF1YWxzUm91bmRlZCIsIk1hdGgiLCJyb3VuZCIsImJveEVxdWFsc1JvdW5kZWQiLCJhc3BlY3RSYXRpbyIsImJveCIsImF4aXNEZWx0YUVxdWFscyIsIm9yaWdpblBvaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentProjectionNode: () => (/* binding */ DocumentProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n\n\nconst DocumentProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    attachResizeListener: (ref, notify)=>(0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(ref, \"resize\", notify),\n    measureScroll: ()=>({\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        }),\n    checkIsScrollRoot: ()=>true\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7QUFDUDtBQUU3RCxNQUFNRSx5QkFBeUJGLGlGQUFvQkEsQ0FBQztJQUNoREcsc0JBQXNCLENBQUNDLEtBQUtDLFNBQVdKLHNFQUFXQSxDQUFDRyxLQUFLLFVBQVVDO0lBQ2xFQyxlQUFlLElBQU87WUFDbEJDLEdBQUdDLFNBQVNDLGVBQWUsQ0FBQ0MsVUFBVSxJQUFJRixTQUFTRyxJQUFJLENBQUNELFVBQVU7WUFDbEVFLEdBQUdKLFNBQVNDLGVBQWUsQ0FBQ0ksU0FBUyxJQUFJTCxTQUFTRyxJQUFJLENBQUNFLFNBQVM7UUFDcEU7SUFDQUMsbUJBQW1CLElBQU07QUFDN0I7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhci1jb29sLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvRG9jdW1lbnRQcm9qZWN0aW9uTm9kZS5tanM/M2VmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4vY3JlYXRlLXByb2plY3Rpb24tbm9kZS5tanMnO1xuaW1wb3J0IHsgYWRkRG9tRXZlbnQgfSBmcm9tICcuLi8uLi9ldmVudHMvYWRkLWRvbS1ldmVudC5tanMnO1xuXG5jb25zdCBEb2N1bWVudFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIGF0dGFjaFJlc2l6ZUxpc3RlbmVyOiAocmVmLCBub3RpZnkpID0+IGFkZERvbUV2ZW50KHJlZiwgXCJyZXNpemVcIiwgbm90aWZ5KSxcbiAgICBtZWFzdXJlU2Nyb2xsOiAoKSA9PiAoe1xuICAgICAgICB4OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsXG4gICAgICAgIHk6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgfSksXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6ICgpID0+IHRydWUsXG59KTtcblxuZXhwb3J0IHsgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVByb2plY3Rpb25Ob2RlIiwiYWRkRG9tRXZlbnQiLCJEb2N1bWVudFByb2plY3Rpb25Ob2RlIiwiYXR0YWNoUmVzaXplTGlzdGVuZXIiLCJyZWYiLCJub3RpZnkiLCJtZWFzdXJlU2Nyb2xsIiwieCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsTGVmdCIsImJvZHkiLCJ5Iiwic2Nyb2xsVG9wIiwiY2hlY2tJc1Njcm9sbFJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLProjectionNode: () => (/* binding */ HTMLProjectionNode),\n/* harmony export */   rootProjectionNode: () => (/* binding */ rootProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DocumentProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\");\n\n\nconst rootProjectionNode = {\n    current: undefined\n};\nconst HTMLProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    measureScroll: (instance)=>({\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        }),\n    defaultParent: ()=>{\n        if (!rootProjectionNode.current) {\n            const documentNode = new _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__.DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value)=>{\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance)=>Boolean(window.getComputedStyle(instance).position === \"fixed\")\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDRTtBQUV0RSxNQUFNRSxxQkFBcUI7SUFDdkJDLFNBQVNDO0FBQ2I7QUFDQSxNQUFNQyxxQkFBcUJMLGlGQUFvQkEsQ0FBQztJQUM1Q00sZUFBZSxDQUFDQyxXQUFjO1lBQzFCQyxHQUFHRCxTQUFTRSxVQUFVO1lBQ3RCQyxHQUFHSCxTQUFTSSxTQUFTO1FBQ3pCO0lBQ0FDLGVBQWU7UUFDWCxJQUFJLENBQUNWLG1CQUFtQkMsT0FBTyxFQUFFO1lBQzdCLE1BQU1VLGVBQWUsSUFBSVosK0VBQXNCQSxDQUFDLENBQUM7WUFDakRZLGFBQWFDLEtBQUssQ0FBQ0M7WUFDbkJGLGFBQWFHLFVBQVUsQ0FBQztnQkFBRUMsY0FBYztZQUFLO1lBQzdDZixtQkFBbUJDLE9BQU8sR0FBR1U7UUFDakM7UUFDQSxPQUFPWCxtQkFBbUJDLE9BQU87SUFDckM7SUFDQWUsZ0JBQWdCLENBQUNYLFVBQVVZO1FBQ3ZCWixTQUFTYSxLQUFLLENBQUNDLFNBQVMsR0FBR0YsVUFBVWYsWUFBWWUsUUFBUTtJQUM3RDtJQUNBRyxtQkFBbUIsQ0FBQ2YsV0FBYWdCLFFBQVFSLE9BQU9TLGdCQUFnQixDQUFDakIsVUFBVWtCLFFBQVEsS0FBSztBQUM1RjtBQUVrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzP2I3ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcbmltcG9ydCB7IERvY3VtZW50UHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL0RvY3VtZW50UHJvamVjdGlvbk5vZGUubWpzJztcblxuY29uc3Qgcm9vdFByb2plY3Rpb25Ob2RlID0ge1xuICAgIGN1cnJlbnQ6IHVuZGVmaW5lZCxcbn07XG5jb25zdCBIVE1MUHJvamVjdGlvbk5vZGUgPSBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7XG4gICAgbWVhc3VyZVNjcm9sbDogKGluc3RhbmNlKSA9PiAoe1xuICAgICAgICB4OiBpbnN0YW5jZS5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBpbnN0YW5jZS5zY3JvbGxUb3AsXG4gICAgfSksXG4gICAgZGVmYXVsdFBhcmVudDogKCkgPT4ge1xuICAgICAgICBpZiAoIXJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudE5vZGUgPSBuZXcgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSh7fSk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUubW91bnQod2luZG93KTtcbiAgICAgICAgICAgIGRvY3VtZW50Tm9kZS5zZXRPcHRpb25zKHsgbGF5b3V0U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgcm9vdFByb2plY3Rpb25Ob2RlLmN1cnJlbnQgPSBkb2N1bWVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50O1xuICAgIH0sXG4gICAgcmVzZXRUcmFuc2Zvcm06IChpbnN0YW5jZSwgdmFsdWUpID0+IHtcbiAgICAgICAgaW5zdGFuY2Uuc3R5bGUudHJhbnNmb3JtID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogXCJub25lXCI7XG4gICAgfSxcbiAgICBjaGVja0lzU2Nyb2xsUm9vdDogKGluc3RhbmNlKSA9PiBCb29sZWFuKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGluc3RhbmNlKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiKSxcbn0pO1xuXG5leHBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUsIHJvb3RQcm9qZWN0aW9uTm9kZSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVByb2plY3Rpb25Ob2RlIiwiRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSIsInJvb3RQcm9qZWN0aW9uTm9kZSIsImN1cnJlbnQiLCJ1bmRlZmluZWQiLCJIVE1MUHJvamVjdGlvbk5vZGUiLCJtZWFzdXJlU2Nyb2xsIiwiaW5zdGFuY2UiLCJ4Iiwic2Nyb2xsTGVmdCIsInkiLCJzY3JvbGxUb3AiLCJkZWZhdWx0UGFyZW50IiwiZG9jdW1lbnROb2RlIiwibW91bnQiLCJ3aW5kb3ciLCJzZXRPcHRpb25zIiwibGF5b3V0U2Nyb2xsIiwicmVzZXRUcmFuc2Zvcm0iLCJ2YWx1ZSIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2hlY2tJc1Njcm9sbFJvb3QiLCJCb29sZWFuIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanDirtyNodes: () => (/* binding */ cleanDirtyNodes),\n/* harmony export */   createProjectionNode: () => (/* binding */ createProjectionNode),\n/* harmony export */   mixAxis: () => (/* binding */ mixAxis),\n/* harmony export */   mixAxisDelta: () => (/* binding */ mixAxisDelta),\n/* harmony export */   mixBox: () => (/* binding */ mixBox),\n/* harmony export */   propagateDirtyNodes: () => (/* binding */ propagateDirtyNodes)\n/* harmony export */ });\n/* harmony import */ var motion_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! motion-dom */ \"(ssr)/./node_modules/motion-dom/dist/es/index.mjs\");\n/* harmony import */ var motion_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! motion-utils */ \"(ssr)/./node_modules/motion-utils/dist/es/index.mjs\");\n/* harmony import */ var _animation_animate_single_value_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../animation/animate/single-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animate/single-value.mjs\");\n/* harmony import */ var _animation_optimized_appear_get_appear_id_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../animation/optimized-appear/get-appear-id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n/* harmony import */ var _frameloop_microtask_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../frameloop/microtask.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/microtask.mjs\");\n/* harmony import */ var _frameloop_sync_time_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../frameloop/sync-time.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/sync-time.mjs\");\n/* harmony import */ var _render_dom_utils_is_svg_element_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../render/dom/utils/is-svg-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs\");\n/* harmony import */ var _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render/utils/flat-tree.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs\");\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _utils_delay_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/delay.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/delay.mjs\");\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n/* harmony import */ var _value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../value/utils/resolve-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\");\n/* harmony import */ var _animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../animation/mix-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\");\n/* harmony import */ var _geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../geometry/copy.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n/* harmony import */ var _geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n/* harmony import */ var _geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../geometry/delta-remove.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\");\n/* harmony import */ var _geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geometry/utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\");\n/* harmony import */ var _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../shared/stack.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\");\n/* harmony import */ var _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _styles_transform_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../styles/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\");\n/* harmony import */ var _utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utils/each-axis.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n/* harmony import */ var _state_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n};\nconst isDebug =  false && 0;\nconst transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\nconst hiddenVisibility = {\n    visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ const animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode) return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement) return;\n    const appearId = (0,_animation_optimized_appear_get_appear_id_mjs__WEBPACK_IMPORTED_MODULE_2__.getOptimisedAppearId)(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()){\n            /**\n             * A unique ID generated for every projection node.\n             */ this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */ this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */ this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */ this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */ this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */ this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = ()=>this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = ()=>{\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */ this.updateProjection = ()=>{\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */ if (isDebug) {\n                    metrics.totalNodes = metrics.resolvedTargetDeltas = metrics.recalculatedProjection = 0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */ this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [\n                ...parent.path,\n                parent\n            ] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for(let i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_4__.FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_5__.SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */ mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance) return;\n            this.isSVG = (0,_render_dom_utils_is_svg_element_mjs__WEBPACK_IMPORTED_MODULE_6__.isSVGElement)(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = ()=>this.root.updateBlockedByResize = false;\n                attachResizeListener(instance, ()=>{\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = (0,_utils_delay_mjs__WEBPACK_IMPORTED_MODULE_7__.delay)(resizeUnblockUpdate, 250);\n                    if (_state_mjs__WEBPACK_IMPORTED_MODULE_8__.globalProjectionState.hasAnimatedSinceResize) {\n                        _state_mjs__WEBPACK_IMPORTED_MODULE_8__.globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout })=>{\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ const hasTargetChanged = !this.targetLayout || !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.boxEqualsRounded)(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */ // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot || this.resumeFrom || hasOnlyRelativeTargetChanged || hasLayoutChanged && (hasTargetChanged || !this.currentAnimation)) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...(0,motion_dom__WEBPACK_IMPORTED_MODULE_0__.getValueTransition)(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        };\n                        if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.cancelFrame)(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */ if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout) return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */ const now = _frameloop_sync_time_mjs__WEBPACK_IMPORTED_MODULE_10__.time.now();\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.delta = (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_11__.clamp)(0, 1000 / 60, now - _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.timestamp);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.timestamp = now;\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.isProcessing = true;\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameSteps.update.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameSteps.preRender.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameSteps.render.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                _frameloop_microtask_mjs__WEBPACK_IMPORTED_MODULE_12__.microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.postRender(()=>{\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                } else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */ updateSnapshot() {\n            if (this.snapshot || !this.instance) return;\n            this.snapshot = this.measure();\n            if (this.snapshot && !(0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(this.snapshot.measuredBox.x) && !(0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(let i = 0; i < this.path.length; i++){\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform) return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.isDeltaZero)(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */ if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement) return (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.translateAxis)(box.x, scroll.offset.x);\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.translateAxis)(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (scroll.wasRoot) {\n                        (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(boxWithoutScroll, box);\n                    }\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.translateAxis)(boxWithoutScroll.x, scroll.offset.x);\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.translateAxis)(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(withTransforms, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.transformBox)(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y\n                    });\n                }\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(node.latestValues)) continue;\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.transformBox)(withTransforms, node.latestValues);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.transformBox)(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(boxWithoutTransform, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!node.instance) continue;\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(node.latestValues)) continue;\n                (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasScale)(node.latestValues) && node.updateSnapshot();\n                const sourceBox = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                const nodeBox = node.measurePageBox();\n                (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(sourceBox, nodeBox);\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_18__.removeBoxTransforms)(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_18__.removeBoxTransforms)(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent) return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */ if (this.relativeParent.resolvedRelativeTargetAt !== _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */ const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */ const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            this.resolvedRelativeTargetAt = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativePosition)(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                this.targetWithTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativeBox)(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                } else {\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(this.target, this.layout.layoutBox);\n                }\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.applyBoxDelta)(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativePosition)(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */ if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasScale)(this.parent.latestValues) || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.has2DTranslate)(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */ if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */ if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */ if (this.resolvedRelativeTargetAt === _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */ const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.applyTreeDeltas)(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */ if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */ if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            } else {\n                (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyAxisDeltaInto)(this.prevProjectionDelta.x, this.projectionDelta.x);\n                (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyAxisDeltaInto)(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcBoxDelta)(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.axisDeltaEquals)(this.projectionDelta.x, this.prevProjectionDelta.x) || !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.axisDeltaEquals)(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */ if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n            this.projectionDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n            this.projectionDeltaWithTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = {\n                ...this.latestValues\n            };\n            const targetDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest)=>{\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativePosition)(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */ if (prevRelativeTarget && (0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.boxEquals)(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget) prevRelativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    (0,_animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_19__.mixValues)(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.cancelFrame)(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.update(()=>{\n                _state_mjs__WEBPACK_IMPORTED_MODULE_8__.globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = (0,_animation_animate_single_value_mjs__WEBPACK_IMPORTED_MODULE_20__.animateSingleValue)(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest)=>{\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: ()=>{\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    }\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout) return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */ if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                const xLength = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_17__.copyBoxInto)(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_16__.transformBox)(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcBoxDelta)(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_21__.NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity } = {}) {\n            const stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition\n            });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement) return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */ const { latestValues } = visualElement;\n            if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform) return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for(let i = 0; i < transformAxes.length; i++){\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for(const key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG) return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\"\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_22__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n                    emptyStyles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_22__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_15__.hasTransform)(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = (0,_styles_transform_mjs__WEBPACK_IMPORTED_MODULE_23__.buildProjectionTransform)(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(const key in _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_24__.scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                const { correct, applyTo, isCSSVariable } = _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_24__.scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */ const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for(let i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    } else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_22__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node)=>{\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_25__.eachAxis)((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_25__.eachAxis)((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcLength)(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */ if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n        (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcBoxDelta)(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createDelta)();\n        if (isShared) {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcBoxDelta)(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        } else {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcBoxDelta)(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.isDeltaZero)(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativePosition)(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_14__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.calcRelativePosition)(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.boxEqualsRounded)(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged\n        });\n    } else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */ if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent) return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */ if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */ node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_26__.mixNumber)(delta.translate, 0, p);\n    output.scale = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_26__.mixNumber)(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_26__.mixNumber)(from.min, to.min, p);\n    output.max = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_26__.mixNumber)(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nconst userAgentContains = (string)=>typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */ const roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : motion_utils__WEBPACK_IMPORTED_MODULE_1__.noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return animationType === \"position\" || animationType === \"preserve-aspect\" && !(0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_13__.isNear)((0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.aspectRatio)(snapshot), (0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_9__.aspectRatio)(layout), 0.2);\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/state.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalProjectionState: () => (/* binding */ globalProjectionState)\n/* harmony export */ });\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ const globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxNQUFNQSx3QkFBd0I7SUFDMUI7OztLQUdDLEdBQ0RDLHdCQUF3QjtJQUN4Qjs7O0tBR0MsR0FDREMsZ0JBQWdCO0FBQ3BCO0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL3N0YXRlLm1qcz85MDM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzaG91bGQgb25seSBldmVyIGJlIG1vZGlmaWVkIG9uIHRoZSBjbGllbnQgb3RoZXJ3aXNlIGl0J2xsXG4gKiBwZXJzaXN0IHRocm91Z2ggc2VydmVyIHJlcXVlc3RzLiBJZiB3ZSBuZWVkIGluc3RhbmNlZCBzdGF0ZXMgd2VcbiAqIGNvdWxkIGxhenktaW5pdCB2aWEgcm9vdC5cbiAqL1xuY29uc3QgZ2xvYmFsUHJvamVjdGlvblN0YXRlID0ge1xuICAgIC8qKlxuICAgICAqIEdsb2JhbCBmbGFnIGFzIHRvIHdoZXRoZXIgdGhlIHRyZWUgaGFzIGFuaW1hdGVkIHNpbmNlIHRoZSBsYXN0IHRpbWVcbiAgICAgKiB3ZSByZXNpemVkIHRoZSB3aW5kb3dcbiAgICAgKi9cbiAgICBoYXNBbmltYXRlZFNpbmNlUmVzaXplOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIFdlIHNldCB0aGlzIHRvIHRydWUgb25jZSwgb24gdGhlIGZpcnN0IHVwZGF0ZS4gQW55IG5vZGVzIGFkZGVkIHRvIHRoZSB0cmVlIGJleW9uZCB0aGF0XG4gICAgICogdXBkYXRlIHdpbGwgYmUgZ2l2ZW4gYSBgZGF0YS1wcm9qZWN0aW9uLWlkYCBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgaGFzRXZlclVwZGF0ZWQ6IGZhbHNlLFxufTtcblxuZXhwb3J0IHsgZ2xvYmFsUHJvamVjdGlvblN0YXRlIH07XG4iXSwibmFtZXMiOlsiZ2xvYmFsUHJvamVjdGlvblN0YXRlIiwiaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZSIsImhhc0V2ZXJVcGRhdGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/shared/stack.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeStack: () => (/* binding */ NodeStack)\n/* harmony export */ });\n/* harmony import */ var _utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n\nclass NodeStack {\n    constructor(){\n        this.members = [];\n    }\n    add(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member)=>node === member);\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ let prevLead;\n        for(let i = indexOfNode; i >= 0; i--){\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node)=>{\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node)=>{\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBorderRadius: () => (/* binding */ correctBorderRadius),\n/* harmony export */   pixelsToPercent: () => (/* binding */ pixelsToPercent)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ const correctBorderRadius = {\n    correct: (latest, node)=>{\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJvcmRlci1yYWRpdXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUV6RCxTQUFTQyxnQkFBZ0JDLE1BQU0sRUFBRUMsSUFBSTtJQUNqQyxJQUFJQSxLQUFLQyxHQUFHLEtBQUtELEtBQUtFLEdBQUcsRUFDckIsT0FBTztJQUNYLE9BQU8sU0FBV0YsQ0FBQUEsS0FBS0MsR0FBRyxHQUFHRCxLQUFLRSxHQUFHLElBQUs7QUFDOUM7QUFDQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQyxzQkFBc0I7SUFDeEJDLFNBQVMsQ0FBQ0MsUUFBUUM7UUFDZCxJQUFJLENBQUNBLEtBQUtDLE1BQU0sRUFDWixPQUFPRjtRQUNYOzs7U0FHQyxHQUNELElBQUksT0FBT0EsV0FBVyxVQUFVO1lBQzVCLElBQUlSLDhEQUFFQSxDQUFDVyxJQUFJLENBQUNILFNBQVM7Z0JBQ2pCQSxTQUFTSSxXQUFXSjtZQUN4QixPQUNLO2dCQUNELE9BQU9BO1lBQ1g7UUFDSjtRQUNBOzs7U0FHQyxHQUNELE1BQU1LLElBQUlaLGdCQUFnQk8sUUFBUUMsS0FBS0MsTUFBTSxDQUFDRyxDQUFDO1FBQy9DLE1BQU1DLElBQUliLGdCQUFnQk8sUUFBUUMsS0FBS0MsTUFBTSxDQUFDSSxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxFQUFFRCxFQUFFLEVBQUUsRUFBRUMsRUFBRSxDQUFDLENBQUM7SUFDeEI7QUFDSjtBQUVnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJvcmRlci1yYWRpdXMubWpzP2EyMjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmZ1bmN0aW9uIHBpeGVsc1RvUGVyY2VudChwaXhlbHMsIGF4aXMpIHtcbiAgICBpZiAoYXhpcy5tYXggPT09IGF4aXMubWluKVxuICAgICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gKHBpeGVscyAvIChheGlzLm1heCAtIGF4aXMubWluKSkgKiAxMDA7XG59XG4vKipcbiAqIFdlIGFsd2F5cyBjb3JyZWN0IGJvcmRlclJhZGl1cyBhcyBhIHBlcmNlbnRhZ2UgcmF0aGVyIHRoYW4gcGl4ZWxzIHRvIHJlZHVjZSBwYWludHMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgeW91IGFyZSBwcm9qZWN0aW5nIGEgYm94IHRoYXQgaXMgMTAwcHggd2lkZSB3aXRoIGEgMTBweCBib3JkZXJSYWRpdXNcbiAqIGludG8gYSBib3ggdGhhdCBpcyAyMDBweCB3aWRlIHdpdGggYSAyMHB4IGJvcmRlclJhZGl1cywgdGhhdCBpcyBhY3R1YWxseSBhIDEwJVxuICogYm9yZGVyUmFkaXVzIGluIGJvdGggc3RhdGVzLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwaXhlbHMgdGhhdCB3aWxsIHRyaWdnZXJcbiAqIGEgcGFpbnQgZWFjaCB0aW1lLiBJZiB3ZSBhbmltYXRlIGJldHdlZW4gdGhlIHR3byBpbiBwZXJjZW50YWdlIHdlJ2xsIGF2b2lkIGEgcGFpbnQuXG4gKi9cbmNvbnN0IGNvcnJlY3RCb3JkZXJSYWRpdXMgPSB7XG4gICAgY29ycmVjdDogKGxhdGVzdCwgbm9kZSkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUudGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGxhdGVzdCBpcyBhIHN0cmluZywgaWYgaXQncyBhIHBlcmNlbnRhZ2Ugd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseSBhcyBpdCdzXG4gICAgICAgICAqIGdvaW5nIHRvIGJlIHN0cmV0Y2hlZCBhcHByb3ByaWF0ZWx5LiBPdGhlcndpc2UsIGlmIGl0J3MgYSBwaXhlbCwgY29udmVydCBpdCB0byBhIG51bWJlci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgbGF0ZXN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocHgudGVzdChsYXRlc3QpKSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0ID0gcGFyc2VGbG9hdChsYXRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgbGF0ZXN0IGlzIGEgbnVtYmVyLCBpdCdzIGEgcGl4ZWwgdmFsdWUuIFdlIHVzZSB0aGUgY3VycmVudCB2aWV3cG9ydEJveCB0byBjYWxjdWxhdGUgdGhhdFxuICAgICAgICAgKiBwaXhlbCB2YWx1ZSBhcyBhIHBlcmNlbnRhZ2Ugb2YgZWFjaCBheGlzXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB4ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueCk7XG4gICAgICAgIGNvbnN0IHkgPSBwaXhlbHNUb1BlcmNlbnQobGF0ZXN0LCBub2RlLnRhcmdldC55KTtcbiAgICAgICAgcmV0dXJuIGAke3h9JSAke3l9JWA7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvcnJlY3RCb3JkZXJSYWRpdXMsIHBpeGVsc1RvUGVyY2VudCB9O1xuIl0sIm5hbWVzIjpbInB4IiwicGl4ZWxzVG9QZXJjZW50IiwicGl4ZWxzIiwiYXhpcyIsIm1heCIsIm1pbiIsImNvcnJlY3RCb3JkZXJSYWRpdXMiLCJjb3JyZWN0IiwibGF0ZXN0Iiwibm9kZSIsInRhcmdldCIsInRlc3QiLCJwYXJzZUZsb2F0IiwieCIsInkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBoxShadow: () => (/* binding */ correctBoxShadow)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mix/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix/number.mjs\");\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta })=>{\n        const original = latest;\n        const shadow = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        const template = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__.complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ const averageScale = (0,_utils_mix_number_mjs__WEBPACK_IMPORTED_MODULE_1__.mixNumber)(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RDtBQUNPO0FBRTlELE1BQU1FLG1CQUFtQjtJQUNyQkMsU0FBUyxDQUFDQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFO1FBQzVDLE1BQU1DLFdBQVdIO1FBQ2pCLE1BQU1JLFNBQVNQLG1FQUFPQSxDQUFDUSxLQUFLLENBQUNMO1FBQzdCLHlDQUF5QztRQUN6QyxJQUFJSSxPQUFPRSxNQUFNLEdBQUcsR0FDaEIsT0FBT0g7UUFDWCxNQUFNSSxXQUFXVixtRUFBT0EsQ0FBQ1csaUJBQWlCLENBQUNSO1FBQzNDLE1BQU1TLFNBQVMsT0FBT0wsTUFBTSxDQUFDLEVBQUUsS0FBSyxXQUFXLElBQUk7UUFDbkQsc0NBQXNDO1FBQ3RDLE1BQU1NLFNBQVNSLGdCQUFnQlMsQ0FBQyxDQUFDQyxLQUFLLEdBQUdYLFVBQVVVLENBQUM7UUFDcEQsTUFBTUUsU0FBU1gsZ0JBQWdCWSxDQUFDLENBQUNGLEtBQUssR0FBR1gsVUFBVWEsQ0FBQztRQUNwRFYsTUFBTSxDQUFDLElBQUlLLE9BQU8sSUFBSUM7UUFDdEJOLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlJO1FBQ3RCOzs7OztTQUtDLEdBQ0QsTUFBTUUsZUFBZW5CLGdFQUFTQSxDQUFDYyxRQUFRRyxRQUFRO1FBQy9DLE9BQU87UUFDUCxJQUFJLE9BQU9ULE1BQU0sQ0FBQyxJQUFJSyxPQUFPLEtBQUssVUFDOUJMLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlNO1FBQzFCLFNBQVM7UUFDVCxJQUFJLE9BQU9YLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLEtBQUssVUFDOUJMLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlNO1FBQzFCLE9BQU9SLFNBQVNIO0lBQ3BCO0FBQ0o7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhci1jb29sLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3gtc2hhZG93Lm1qcz80YjExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1peE51bWJlciB9IGZyb20gJy4uLy4uL3V0aWxzL21peC9udW1iZXIubWpzJztcbmltcG9ydCB7IGNvbXBsZXggfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcyc7XG5cbmNvbnN0IGNvcnJlY3RCb3hTaGFkb3cgPSB7XG4gICAgY29ycmVjdDogKGxhdGVzdCwgeyB0cmVlU2NhbGUsIHByb2plY3Rpb25EZWx0YSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gbGF0ZXN0O1xuICAgICAgICBjb25zdCBzaGFkb3cgPSBjb21wbGV4LnBhcnNlKGxhdGVzdCk7XG4gICAgICAgIC8vIFRPRE86IERvZXNuJ3Qgc3VwcG9ydCBtdWx0aXBsZSBzaGFkb3dzXG4gICAgICAgIGlmIChzaGFkb3cubGVuZ3RoID4gNSlcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBjb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHR5cGVvZiBzaGFkb3dbMF0gIT09IFwibnVtYmVyXCIgPyAxIDogMDtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBvdmVyYWxsIGNvbnRleHQgc2NhbGVcbiAgICAgICAgY29uc3QgeFNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnguc2NhbGUgKiB0cmVlU2NhbGUueDtcbiAgICAgICAgY29uc3QgeVNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICAgICAgc2hhZG93WzAgKyBvZmZzZXRdIC89IHhTY2FsZTtcbiAgICAgICAgc2hhZG93WzEgKyBvZmZzZXRdIC89IHlTY2FsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZWFsbHkgd2UnZCBjb3JyZWN0IHggYW5kIHkgc2NhbGVzIGluZGl2aWR1YWxseSwgYnV0IGJlY2F1c2UgYmx1ciBhbmRcbiAgICAgICAgICogc3ByZWFkIGFwcGx5IHRvIGJvdGggd2UgaGF2ZSB0byB0YWtlIGEgc2NhbGUgYXZlcmFnZSBhbmQgYXBwbHkgdGhhdCBpbnN0ZWFkLlxuICAgICAgICAgKiBXZSBjb3VsZCBwb3RlbnRpYWxseSBpbXByb3ZlIHRoZSBvdXRjb21lIG9mIHRoaXMgYnkgaW5jb3Jwb3JhdGluZyB0aGUgcmF0aW8gYmV0d2VlblxuICAgICAgICAgKiB0aGUgdHdvIHNjYWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGF2ZXJhZ2VTY2FsZSA9IG1peE51bWJlcih4U2NhbGUsIHlTY2FsZSwgMC41KTtcbiAgICAgICAgLy8gQmx1clxuICAgICAgICBpZiAodHlwZW9mIHNoYWRvd1syICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHNoYWRvd1syICsgb2Zmc2V0XSAvPSBhdmVyYWdlU2NhbGU7XG4gICAgICAgIC8vIFNwcmVhZFxuICAgICAgICBpZiAodHlwZW9mIHNoYWRvd1szICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHNoYWRvd1szICsgb2Zmc2V0XSAvPSBhdmVyYWdlU2NhbGU7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZShzaGFkb3cpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb3JyZWN0Qm94U2hhZG93IH07XG4iXSwibmFtZXMiOlsibWl4TnVtYmVyIiwiY29tcGxleCIsImNvcnJlY3RCb3hTaGFkb3ciLCJjb3JyZWN0IiwibGF0ZXN0IiwidHJlZVNjYWxlIiwicHJvamVjdGlvbkRlbHRhIiwib3JpZ2luYWwiLCJzaGFkb3ciLCJwYXJzZSIsImxlbmd0aCIsInRlbXBsYXRlIiwiY3JlYXRlVHJhbnNmb3JtZXIiLCJvZmZzZXQiLCJ4U2NhbGUiLCJ4Iiwic2NhbGUiLCJ5U2NhbGUiLCJ5IiwiYXZlcmFnZVNjYWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addScaleCorrector: () => (/* binding */ addScaleCorrector),\n/* harmony export */   scaleCorrectors: () => (/* binding */ scaleCorrectors)\n/* harmony export */ });\n/* harmony import */ var _render_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for(const key in correctors){\n        scaleCorrectors[key] = correctors[key];\n        if ((0,_render_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__.isCSSVariableName)(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErRTtBQUUvRSxNQUFNQyxrQkFBa0IsQ0FBQztBQUN6QixTQUFTQyxrQkFBa0JDLFVBQVU7SUFDakMsSUFBSyxNQUFNQyxPQUFPRCxXQUFZO1FBQzFCRixlQUFlLENBQUNHLElBQUksR0FBR0QsVUFBVSxDQUFDQyxJQUFJO1FBQ3RDLElBQUlKLHdGQUFpQkEsQ0FBQ0ksTUFBTTtZQUN4QkgsZUFBZSxDQUFDRyxJQUFJLENBQUNDLGFBQWEsR0FBRztRQUN6QztJQUNKO0FBQ0o7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhci1jb29sLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcz9lYWRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQ1NTVmFyaWFibGVOYW1lIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzJztcblxuY29uc3Qgc2NhbGVDb3JyZWN0b3JzID0ge307XG5mdW5jdGlvbiBhZGRTY2FsZUNvcnJlY3Rvcihjb3JyZWN0b3JzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gY29ycmVjdG9ycykge1xuICAgICAgICBzY2FsZUNvcnJlY3RvcnNba2V5XSA9IGNvcnJlY3RvcnNba2V5XTtcbiAgICAgICAgaWYgKGlzQ1NTVmFyaWFibGVOYW1lKGtleSkpIHtcbiAgICAgICAgICAgIHNjYWxlQ29ycmVjdG9yc1trZXldLmlzQ1NTVmFyaWFibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBhZGRTY2FsZUNvcnJlY3Rvciwgc2NhbGVDb3JyZWN0b3JzIH07XG4iXSwibmFtZXMiOlsiaXNDU1NWYXJpYWJsZU5hbWUiLCJzY2FsZUNvcnJlY3RvcnMiLCJhZGRTY2FsZUNvcnJlY3RvciIsImNvcnJlY3RvcnMiLCJrZXkiLCJpc0NTU1ZhcmlhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/transform.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildProjectionTransform: () => (/* binding */ buildProjectionTransform)\n/* harmony export */ });\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective) transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate) transform += `rotate(${rotate}deg) `;\n        if (rotateX) transform += `rotateX(${rotateX}deg) `;\n        if (rotateY) transform += `rotateY(${rotateY}deg) `;\n        if (skewX) transform += `skewX(${skewX}deg) `;\n        if (skewY) transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLHlCQUF5QkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLGVBQWU7SUFDL0QsSUFBSUMsWUFBWTtJQUNoQjs7Ozs7S0FLQyxHQUNELE1BQU1DLGFBQWFKLE1BQU1LLENBQUMsQ0FBQ0MsU0FBUyxHQUFHTCxVQUFVSSxDQUFDO0lBQ2xELE1BQU1FLGFBQWFQLE1BQU1RLENBQUMsQ0FBQ0YsU0FBUyxHQUFHTCxVQUFVTyxDQUFDO0lBQ2xELE1BQU1DLGFBQWEsQ0FBQ1Asb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUksS0FBSyxJQUFJQSxnQkFBZ0JRLENBQUMsS0FBSztJQUM1RyxJQUFJTixjQUFjRyxjQUFjRSxZQUFZO1FBQ3hDTixZQUFZLENBQUMsWUFBWSxFQUFFQyxXQUFXLElBQUksRUFBRUcsV0FBVyxJQUFJLEVBQUVFLFdBQVcsSUFBSSxDQUFDO0lBQ2pGO0lBQ0E7OztLQUdDLEdBQ0QsSUFBSVIsVUFBVUksQ0FBQyxLQUFLLEtBQUtKLFVBQVVPLENBQUMsS0FBSyxHQUFHO1FBQ3hDTCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUlGLFVBQVVJLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSUosVUFBVU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNqRTtJQUNBLElBQUlOLGlCQUFpQjtRQUNqQixNQUFNLEVBQUVTLG9CQUFvQixFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRSxHQUFHZDtRQUN6RSxJQUFJUyxzQkFDQVIsWUFBWSxDQUFDLFlBQVksRUFBRVEscUJBQXFCLElBQUksRUFBRVIsVUFBVSxDQUFDO1FBQ3JFLElBQUlTLFFBQ0FULGFBQWEsQ0FBQyxPQUFPLEVBQUVTLE9BQU8sS0FBSyxDQUFDO1FBQ3hDLElBQUlDLFNBQ0FWLGFBQWEsQ0FBQyxRQUFRLEVBQUVVLFFBQVEsS0FBSyxDQUFDO1FBQzFDLElBQUlDLFNBQ0FYLGFBQWEsQ0FBQyxRQUFRLEVBQUVXLFFBQVEsS0FBSyxDQUFDO1FBQzFDLElBQUlDLE9BQ0FaLGFBQWEsQ0FBQyxNQUFNLEVBQUVZLE1BQU0sS0FBSyxDQUFDO1FBQ3RDLElBQUlDLE9BQ0FiLGFBQWEsQ0FBQyxNQUFNLEVBQUVhLE1BQU0sS0FBSyxDQUFDO0lBQzFDO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTUMsZ0JBQWdCakIsTUFBTUssQ0FBQyxDQUFDYSxLQUFLLEdBQUdqQixVQUFVSSxDQUFDO0lBQ2pELE1BQU1jLGdCQUFnQm5CLE1BQU1RLENBQUMsQ0FBQ1UsS0FBSyxHQUFHakIsVUFBVU8sQ0FBQztJQUNqRCxJQUFJUyxrQkFBa0IsS0FBS0Usa0JBQWtCLEdBQUc7UUFDNUNoQixhQUFhLENBQUMsTUFBTSxFQUFFYyxjQUFjLEVBQUUsRUFBRUUsY0FBYyxDQUFDLENBQUM7SUFDNUQ7SUFDQSxPQUFPaEIsYUFBYTtBQUN4QjtBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3RyYW5zZm9ybS5tanM/OWZkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0oZGVsdGEsIHRyZWVTY2FsZSwgbGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgbGV0IHRyYW5zZm9ybSA9IFwiXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zbGF0aW9ucyB3ZSB1c2UgdG8gY2FsY3VsYXRlIGFyZSBhbHdheXMgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGUgc3BhY2UuXG4gICAgICogQnV0IHdoZW4gd2UgYXBwbHkgc2NhbGVzLCB3ZSBhbHNvIHNjYWxlIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBGb3IgaW5zdGFuY2UgaWYgd2UgaGF2ZSBhIHRyZWVTY2FsZSAodGhlIGN1bG1pbmF0aW9uIG9mIGFsbCBwYXJlbnQgc2NhbGVzKSBvZiAwLjUgYW5kIHdlIG5lZWRcbiAgICAgKiB0byBtb3ZlIGFuIGVsZW1lbnQgMTAwIHBpeGVscywgd2UgYWN0dWFsbHkgbmVlZCB0byBtb3ZlIGl0IDIwMCBpbiB3aXRoaW4gdGhhdCBzY2FsZWQgc3BhY2UuXG4gICAgICovXG4gICAgY29uc3QgeFRyYW5zbGF0ZSA9IGRlbHRhLngudHJhbnNsYXRlIC8gdHJlZVNjYWxlLng7XG4gICAgY29uc3QgeVRyYW5zbGF0ZSA9IGRlbHRhLnkudHJhbnNsYXRlIC8gdHJlZVNjYWxlLnk7XG4gICAgY29uc3QgelRyYW5zbGF0ZSA9IChsYXRlc3RUcmFuc2Zvcm0gPT09IG51bGwgfHwgbGF0ZXN0VHJhbnNmb3JtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXRlc3RUcmFuc2Zvcm0ueikgfHwgMDtcbiAgICBpZiAoeFRyYW5zbGF0ZSB8fCB5VHJhbnNsYXRlIHx8IHpUcmFuc2xhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eFRyYW5zbGF0ZX1weCwgJHt5VHJhbnNsYXRlfXB4LCAke3pUcmFuc2xhdGV9cHgpIGA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHNjYWxlIGNvcnJlY3Rpb24gZm9yIHRoZSB0cmVlIHRyYW5zZm9ybS5cbiAgICAgKiBUaGlzIHdpbGwgYXBwbHkgc2NhbGUgdG8gdGhlIHNjcmVlbi1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgaWYgKHRyZWVTY2FsZS54ICE9PSAxIHx8IHRyZWVTY2FsZS55ICE9PSAxKSB7XG4gICAgICAgIHRyYW5zZm9ybSArPSBgc2NhbGUoJHsxIC8gdHJlZVNjYWxlLnh9LCAkezEgLyB0cmVlU2NhbGUueX0pIGA7XG4gICAgfVxuICAgIGlmIChsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc3QgeyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSwgcm90YXRlLCByb3RhdGVYLCByb3RhdGVZLCBza2V3WCwgc2tld1kgfSA9IGxhdGVzdFRyYW5zZm9ybTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlKVxuICAgICAgICAgICAgdHJhbnNmb3JtID0gYHBlcnNwZWN0aXZlKCR7dHJhbnNmb3JtUGVyc3BlY3RpdmV9cHgpICR7dHJhbnNmb3JtfWA7XG4gICAgICAgIGlmIChyb3RhdGUpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gYHJvdGF0ZSgke3JvdGF0ZX1kZWcpIGA7XG4gICAgICAgIGlmIChyb3RhdGVYKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGVYKCR7cm90YXRlWH1kZWcpIGA7XG4gICAgICAgIGlmIChyb3RhdGVZKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGVZKCR7cm90YXRlWX1kZWcpIGA7XG4gICAgICAgIGlmIChza2V3WClcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgc2tld1goJHtza2V3WH1kZWcpIGA7XG4gICAgICAgIGlmIChza2V3WSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBgc2tld1koJHtza2V3WX1kZWcpIGA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHNjYWxlIHRvIG1hdGNoIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IHRvIHRoZSBzaXplIHdlIHdhbnQgaXQuXG4gICAgICogVGhpcyB3aWxsIGFwcGx5IHNjYWxlIHRvIHRoZSBlbGVtZW50LW9yaWVudGF0ZWQgYXhlcy5cbiAgICAgKi9cbiAgICBjb25zdCBlbGVtZW50U2NhbGVYID0gZGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgIGNvbnN0IGVsZW1lbnRTY2FsZVkgPSBkZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgaWYgKGVsZW1lbnRTY2FsZVggIT09IDEgfHwgZWxlbWVudFNjYWxlWSAhPT0gMSkge1xuICAgICAgICB0cmFuc2Zvcm0gKz0gYHNjYWxlKCR7ZWxlbWVudFNjYWxlWH0sICR7ZWxlbWVudFNjYWxlWX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybSB8fCBcIm5vbmVcIjtcbn1cblxuZXhwb3J0IHsgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIH07XG4iXSwibmFtZXMiOlsiYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIiwiZGVsdGEiLCJ0cmVlU2NhbGUiLCJsYXRlc3RUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ4VHJhbnNsYXRlIiwieCIsInRyYW5zbGF0ZSIsInlUcmFuc2xhdGUiLCJ5IiwielRyYW5zbGF0ZSIsInoiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsInJvdGF0ZSIsInJvdGF0ZVgiLCJyb3RhdGVZIiwic2tld1giLCJza2V3WSIsImVsZW1lbnRTY2FsZVgiLCJzY2FsZSIsImVsZW1lbnRTY2FsZVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eachAxis: () => (/* binding */ eachAxis)\n/* harmony export */ });\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsU0FBU0MsUUFBUTtJQUN0QixPQUFPO1FBQUNBLFNBQVM7UUFBTUEsU0FBUztLQUFLO0FBQ3pDO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYXItY29vbC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9lYWNoLWF4aXMubWpzPzkxMDAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZWFjaEF4aXMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gW2NhbGxiYWNrKFwieFwiKSwgY2FsbGJhY2soXCJ5XCIpXTtcbn1cblxuZXhwb3J0IHsgZWFjaEF4aXMgfTtcbiJdLCJuYW1lcyI6WyJlYWNoQXhpcyIsImNhbGxiYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   has2DTranslate: () => (/* binding */ has2DTranslate),\n/* harmony export */   hasScale: () => (/* binding */ hasScale),\n/* harmony export */   hasTransform: () => (/* binding */ hasTransform)\n/* harmony export */ });\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX || values.skewY;\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsZ0JBQWdCQyxLQUFLO0lBQzFCLE9BQU9BLFVBQVVDLGFBQWFELFVBQVU7QUFDNUM7QUFDQSxTQUFTRSxTQUFTLEVBQUVGLEtBQUssRUFBRUcsTUFBTSxFQUFFQyxNQUFNLEVBQUU7SUFDdkMsT0FBUSxDQUFDTCxnQkFBZ0JDLFVBQ3JCLENBQUNELGdCQUFnQkksV0FDakIsQ0FBQ0osZ0JBQWdCSztBQUN6QjtBQUNBLFNBQVNDLGFBQWFDLE1BQU07SUFDeEIsT0FBUUosU0FBU0ksV0FDYkMsZUFBZUQsV0FDZkEsT0FBT0UsQ0FBQyxJQUNSRixPQUFPRyxNQUFNLElBQ2JILE9BQU9JLE9BQU8sSUFDZEosT0FBT0ssT0FBTyxJQUNkTCxPQUFPTSxLQUFLLElBQ1pOLE9BQU9PLEtBQUs7QUFDcEI7QUFDQSxTQUFTTixlQUFlRCxNQUFNO0lBQzFCLE9BQU9RLGNBQWNSLE9BQU9TLENBQUMsS0FBS0QsY0FBY1IsT0FBT1UsQ0FBQztBQUM1RDtBQUNBLFNBQVNGLGNBQWNHLEtBQUs7SUFDeEIsT0FBT0EsU0FBU0EsVUFBVTtBQUM5QjtBQUVrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFyLWNvb2wvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanM/NjVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKHsgc2NhbGUsIHNjYWxlWCwgc2NhbGVZIH0pIHtcbiAgICByZXR1cm4gKCFpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVYKSB8fFxuICAgICAgICAhaXNJZGVudGl0eVNjYWxlKHNjYWxlWSkpO1xufVxuZnVuY3Rpb24gaGFzVHJhbnNmb3JtKHZhbHVlcykge1xuICAgIHJldHVybiAoaGFzU2NhbGUodmFsdWVzKSB8fFxuICAgICAgICBoYXMyRFRyYW5zbGF0ZSh2YWx1ZXMpIHx8XG4gICAgICAgIHZhbHVlcy56IHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGUgfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVggfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVkgfHxcbiAgICAgICAgdmFsdWVzLnNrZXdYIHx8XG4gICAgICAgIHZhbHVlcy5za2V3WSk7XG59XG5mdW5jdGlvbiBoYXMyRFRyYW5zbGF0ZSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gaXMyRFRyYW5zbGF0ZSh2YWx1ZXMueCkgfHwgaXMyRFRyYW5zbGF0ZSh2YWx1ZXMueSk7XG59XG5mdW5jdGlvbiBpczJEVHJhbnNsYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlICE9PSBcIjAlXCI7XG59XG5cbmV4cG9ydCB7IGhhczJEVHJhbnNsYXRlLCBoYXNTY2FsZSwgaGFzVHJhbnNmb3JtIH07XG4iXSwibmFtZXMiOlsiaXNJZGVudGl0eVNjYWxlIiwic2NhbGUiLCJ1bmRlZmluZWQiLCJoYXNTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsImhhc1RyYW5zZm9ybSIsInZhbHVlcyIsImhhczJEVHJhbnNsYXRlIiwieiIsInJvdGF0ZSIsInJvdGF0ZVgiLCJyb3RhdGVZIiwic2tld1giLCJza2V3WSIsImlzMkRUcmFuc2xhdGUiLCJ4IiwieSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/measure.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   measurePageBox: () => (/* binding */ measurePageBox),\n/* harmony export */   measureViewportBox: () => (/* binding */ measureViewportBox)\n/* harmony export */ });\n/* harmony import */ var _geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\nfunction measureViewportBox(instance, transformPoint) {\n    return (0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.convertBoundingBoxToBox)((0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.transformBoxPoints)(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.x, scroll.offset.x);\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5RjtBQUM3QjtBQUU1RCxTQUFTRyxtQkFBbUJDLFFBQVEsRUFBRUMsY0FBYztJQUNoRCxPQUFPTCxpRkFBdUJBLENBQUNDLDRFQUFrQkEsQ0FBQ0csU0FBU0UscUJBQXFCLElBQUlEO0FBQ3hGO0FBQ0EsU0FBU0UsZUFBZUMsT0FBTyxFQUFFQyxrQkFBa0IsRUFBRUMsa0JBQWtCO0lBQ25FLE1BQU1DLGNBQWNSLG1CQUFtQkssU0FBU0U7SUFDaEQsTUFBTSxFQUFFRSxNQUFNLEVBQUUsR0FBR0g7SUFDbkIsSUFBSUcsUUFBUTtRQUNSVix3RUFBYUEsQ0FBQ1MsWUFBWUUsQ0FBQyxFQUFFRCxPQUFPRSxNQUFNLENBQUNELENBQUM7UUFDNUNYLHdFQUFhQSxDQUFDUyxZQUFZSSxDQUFDLEVBQUVILE9BQU9FLE1BQU0sQ0FBQ0MsQ0FBQztJQUNoRDtJQUNBLE9BQU9KO0FBQ1g7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhci1jb29sLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL21lYXN1cmUubWpzPzYzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydEJvdW5kaW5nQm94VG9Cb3gsIHRyYW5zZm9ybUJveFBvaW50cyB9IGZyb20gJy4uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUF4aXMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1hcHBseS5tanMnO1xuXG5mdW5jdGlvbiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHRyYW5zZm9ybUJveFBvaW50cyhpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdHJhbnNmb3JtUG9pbnQpKTtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVQYWdlQm94KGVsZW1lbnQsIHJvb3RQcm9qZWN0aW9uTm9kZSwgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgY29uc3Qgdmlld3BvcnRCb3ggPSBtZWFzdXJlVmlld3BvcnRCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICBjb25zdCB7IHNjcm9sbCB9ID0gcm9vdFByb2plY3Rpb25Ob2RlO1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC54LCBzY3JvbGwub2Zmc2V0LngpO1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LnksIHNjcm9sbC5vZmZzZXQueSk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3cG9ydEJveDtcbn1cblxuZXhwb3J0IHsgbWVhc3VyZVBhZ2VCb3gsIG1lYXN1cmVWaWV3cG9ydEJveCB9O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwidHJhbnNmb3JtQm94UG9pbnRzIiwidHJhbnNsYXRlQXhpcyIsIm1lYXN1cmVWaWV3cG9ydEJveCIsImluc3RhbmNlIiwidHJhbnNmb3JtUG9pbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtZWFzdXJlUGFnZUJveCIsImVsZW1lbnQiLCJyb290UHJvamVjdGlvbk5vZGUiLCJ0cmFuc2Zvcm1QYWdlUG9pbnQiLCJ2aWV3cG9ydEJveCIsInNjcm9sbCIsIngiLCJvZmZzZXQiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\n");

/***/ })

};
;