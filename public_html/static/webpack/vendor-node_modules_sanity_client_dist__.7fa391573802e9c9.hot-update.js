"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("vendor-node_modules_sanity_client_dist__",{

/***/ "(app-pages-browser)/./node_modules/@sanity/client/dist/index.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.browser.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: function() { return /* binding */ BasePatch; },\n/* harmony export */   BaseTransaction: function() { return /* binding */ BaseTransaction; },\n/* harmony export */   ClientError: function() { return /* binding */ ClientError; },\n/* harmony export */   CorsOriginError: function() { return /* binding */ CorsOriginError; },\n/* harmony export */   ObservablePatch: function() { return /* binding */ ObservablePatch; },\n/* harmony export */   ObservableSanityClient: function() { return /* binding */ ObservableSanityClient; },\n/* harmony export */   ObservableTransaction: function() { return /* binding */ ObservableTransaction; },\n/* harmony export */   Patch: function() { return /* binding */ Patch; },\n/* harmony export */   SanityClient: function() { return /* binding */ SanityClient; },\n/* harmony export */   ServerError: function() { return /* binding */ ServerError; },\n/* harmony export */   Transaction: function() { return /* binding */ Transaction; },\n/* harmony export */   createClient: function() { return /* binding */ createClient; },\n/* harmony export */   \"default\": function() { return /* binding */ deprecatedCreateClient; },\n/* harmony export */   requester: function() { return /* binding */ requester; },\n/* harmony export */   unstable__adapter: function() { return /* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.adapter; },\n/* harmony export */   unstable__environment: function() { return /* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.environment; },\n/* harmony export */   validateApiPerspective: function() { return /* binding */ validateApiPerspective; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(app-pages-browser)/./node_modules/get-it/dist/index.browser.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(app-pages-browser)/./node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var _chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_chunks-es/stegaClean.js */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ \"(app-pages-browser)/./node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n\n\n\n\n\n\n\n\n\nclass ClientError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        var _temp;\n        _temp = super(props.message), this.statusCode = 400, _temp, Object.assign(this, props);\n    }\n}\nclass ServerError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        var _temp;\n        _temp = super(props.message), this.statusCode = 500, _temp, Object.assign(this, props);\n    }\n}\nfunction extractErrorProps(res) {\n    const body = res.body, props = {\n        response: res,\n        statusCode: res.statusCode,\n        responseBody: stringifyBody(body, res),\n        message: \"\",\n        details: void 0\n    };\n    if (body.error && body.message) return props.message = \"\".concat(body.error, \" - \").concat(body.message), props;\n    if (isMutationError(body) || isActionError(body)) {\n        const allItems = body.error.items || [], items = allItems.slice(0, 5).map((item)=>{\n            var _item_error;\n            return (_item_error = item.error) === null || _item_error === void 0 ? void 0 : _item_error.description;\n        }).filter(Boolean);\n        let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n        return allItems.length > 5 && (itemsStr += \"\\n...and \".concat(allItems.length - 5, \" more\")), props.message = \"\".concat(body.error.description).concat(itemsStr), props.details = body.error, props;\n    }\n    return body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);\n}\nfunction isMutationError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description == \"string\";\n}\nfunction isActionError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"actionError\" && typeof body.error.description == \"string\";\n}\nfunction isPlainObject(obj) {\n    return typeof obj == \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n    const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n    return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n    return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? JSON.stringify(body, null, 2) : body;\n}\nclass CorsOriginError extends Error {\n    constructor({ projectId: projectId2 }){\n        super(\"CorsOriginError\"), this.name = \"CorsOriginError\", this.projectId = projectId2;\n        const url = new URL(\"https://sanity.io/manage/project/\".concat(projectId2, \"/api\"));\n        if (typeof location < \"u\") {\n            const { origin } = location;\n            url.searchParams.set(\"cors\", \"add\"), url.searchParams.set(\"origin\", origin), this.addOriginUrl = url, this.message = \"The current origin is not allowed to connect to the Live Content API. Add it here: \".concat(url);\n        } else this.message = \"The current origin is not allowed to connect to the Live Content API. Change your configuration here: \".concat(url);\n    }\n}\nconst httpError = {\n    onResponse: (res)=>{\n        if (res.statusCode >= 500) throw new ServerError(res);\n        if (res.statusCode >= 400) throw new ClientError(res);\n        return res;\n    }\n}, printWarnings = {\n    onResponse: (res)=>{\n        const warn = res.headers[\"x-sanity-warning\"];\n        return (Array.isArray(warn) ? warn : [\n            warn\n        ]).filter(Boolean).forEach((msg)=>console.warn(msg)), res;\n    }\n};\nfunction defineHttpRequest(envMiddleware2) {\n    return (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({\n            shouldRetry\n        }),\n        ...envMiddleware2,\n        printWarnings,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n        httpError,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({\n            implementation: _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable\n        })\n    ]);\n}\nfunction shouldRetry(err, attempt, options) {\n    if (options.maxRetries === 0) return !1;\n    const isSafe = options.method === \"GET\" || options.method === \"HEAD\", isQuery = (options.uri || options.url).startsWith(\"/data/query\"), isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n    return (isSafe || isQuery) && isRetriableResponse ? !0 : get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n    return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\n    \"image\",\n    \"file\"\n], VALID_INSERT_LOCATIONS = [\n    \"before\",\n    \"after\",\n    \"replace\"\n], dataset = (name)=>{\n    if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n}, projectId = (id)=>{\n    if (!/^[-a-z0-9]+$/i.test(id)) throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n}, validateAssetType = (type)=>{\n    if (VALID_ASSET_TYPES.indexOf(type) === -1) throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n}, validateObject = (op, val)=>{\n    if (val === null || typeof val != \"object\" || Array.isArray(val)) throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n}, validateDocumentId = (op, id)=>{\n    if (typeof id != \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) throw new Error(\"\".concat(op, '(): \"').concat(id, '\" is not a valid document ID'));\n}, requireDocumentId = (op, doc)=>{\n    if (!doc._id) throw new Error(\"\".concat(op, '() requires that the document contains an ID (\"_id\" property)'));\n    validateDocumentId(op, doc._id);\n}, validateInsert = (at, selector, items)=>{\n    const signature = \"insert(at, selector, items)\";\n    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n        const valid = VALID_INSERT_LOCATIONS.map((loc)=>'\"'.concat(loc, '\"')).join(\", \");\n        throw new Error(\"\".concat(signature, ' takes an \"at\"-argument which is one of: ').concat(valid));\n    }\n    if (typeof selector != \"string\") throw new Error(\"\".concat(signature, ' takes a \"selector\"-argument which must be a string'));\n    if (!Array.isArray(items)) throw new Error(\"\".concat(signature, ' takes an \"items\"-argument which must be an array'));\n}, hasDataset = (config)=>{\n    if (!config.dataset) throw new Error(\"`dataset` must be provided to perform queries\");\n    return config.dataset || \"\";\n}, requestTag = (tag)=>{\n    if (typeof tag != \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n    return tag;\n};\nfunction once(fn) {\n    let didCall = !1, returnValue;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return didCall || (returnValue = fn(...args), didCall = !0), returnValue;\n    };\n}\nconst createWarningPrinter = (message)=>// eslint-disable-next-line no-console\n    once(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return console.warn(message.join(\" \"), ...args);\n    }), printCdnAndWithCredentialsWarning = createWarningPrinter([\n    \"Because you set `withCredentials` to true, we will override your `useCdn`\",\n    \"setting to be false since (cookie-based) credentials are never set on the CDN\"\n]), printCdnWarning = createWarningPrinter([\n    \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n    \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n    \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]), printCdnPreviewDraftsWarning = createWarningPrinter([\n    \"The Sanity client is configured with the `perspective` set to `previewDrafts`, which doesn't support the API-CDN.\",\n    \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]), printBrowserTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n    \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")\n]), printNoApiVersionSpecifiedWarning = createWarningPrinter([\n    \"Using the Sanity client without specifying an API version is deprecated.\",\n    \"See \".concat(generateHelpUrl(\"js-client-api-version\"))\n]), printNoDefaultExport = createWarningPrinter([\n    \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]), defaultCdnHost = \"apicdn.sanity.io\", defaultConfig = {\n    apiHost: \"https://api.sanity.io\",\n    apiVersion: \"1\",\n    useProjectHostname: !0,\n    stega: {\n        enabled: !1\n    }\n}, LOCALHOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"0.0.0.0\"\n], isLocal = (host)=>LOCALHOSTS.indexOf(host) !== -1;\nfunction validateApiVersion(apiVersion) {\n    if (apiVersion === \"1\" || apiVersion === \"X\") return;\n    const apiDate = new Date(apiVersion);\n    if (!(/^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0)) throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n}\nfunction validateApiPerspective(perspective) {\n    if (Array.isArray(perspective)) {\n        for (const perspectiveValue of perspective)if (perspectiveValue !== \"published\" && perspectiveValue !== \"drafts\" && !(typeof perspectiveValue == \"string\" && perspectiveValue.startsWith(\"r\") && perspectiveValue !== \"raw\")) throw new TypeError(\"Invalid API perspective value, expected `published`, `drafts` or a valid release identifier string\");\n        return;\n    }\n    switch(perspective){\n        case \"previewDrafts\":\n        case \"drafts\":\n        case \"published\":\n        case \"raw\":\n            return;\n        default:\n            throw new TypeError(\"Invalid API perspective string, expected `published`, `previewDrafts` or `raw`\");\n    }\n}\nconst initConfig = (config, prevConfig)=>{\n    const specifiedConfig = {\n        ...prevConfig,\n        ...config,\n        stega: {\n            ...typeof prevConfig.stega == \"boolean\" ? {\n                enabled: prevConfig.stega\n            } : prevConfig.stega || defaultConfig.stega,\n            ...typeof config.stega == \"boolean\" ? {\n                enabled: config.stega\n            } : config.stega || {}\n        }\n    };\n    specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();\n    const newConfig = {\n        ...defaultConfig,\n        ...specifiedConfig\n    }, projectBased = newConfig.useProjectHostname;\n    if (typeof Promise > \"u\") {\n        const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n        throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n    }\n    if (projectBased && !newConfig.projectId) throw new Error(\"Configuration must contain `projectId`\");\n    if (typeof newConfig.perspective < \"u\" && validateApiPerspective(newConfig.perspective), \"encodeSourceMap\" in newConfig) throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\");\n    if (\"encodeSourceMapAtPath\" in newConfig) throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\");\n    if (typeof newConfig.stega.enabled != \"boolean\") throw new Error(\"stega.enabled must be a boolean, received \".concat(newConfig.stega.enabled));\n    if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0) throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n    if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl != \"string\" && typeof newConfig.stega.studioUrl != \"function\") throw new Error(\"stega.studioUrl must be a string or a function, received \".concat(newConfig.stega.studioUrl));\n    const isBrowser =  true && window.location && window.location.hostname, isLocalhost = isBrowser && isLocal(window.location.hostname);\n    isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > \"u\" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), \"requestTagPrefix\" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0), newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\"), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn === !0 && newConfig.withCredentials && printCdnAndWithCredentialsWarning(), newConfig.useCdn = newConfig.useCdn !== !1 && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);\n    const hostParts = newConfig.apiHost.split(\"://\", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n    return newConfig.useProjectHostname ? (newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion), newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion)) : (newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion), newConfig.cdnUrl = newConfig.url), newConfig;\n};\nfunction getSelection(sel) {\n    if (typeof sel == \"string\") return {\n        id: sel\n    };\n    if (Array.isArray(sel)) return {\n        query: \"*[_id in $ids]\",\n        params: {\n            ids: sel\n        }\n    };\n    if (typeof sel == \"object\" && sel !== null && \"query\" in sel && typeof sel.query == \"string\") return \"params\" in sel && typeof sel.params == \"object\" && sel.params !== null ? {\n        query: sel.query,\n        params: sel.params\n    } : {\n        query: sel.query\n    };\n    const selectionOpts = [\n        \"* Document ID (<docId>)\",\n        \"* Array of document IDs\",\n        \"* Object containing `query`\"\n    ].join(\"\\n\");\n    throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nclass BasePatch {\n    /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ set(attrs) {\n        return this._assign(\"set\", attrs);\n    }\n    /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ setIfMissing(attrs) {\n        return this._assign(\"setIfMissing\", attrs);\n    }\n    /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */ diffMatchPatch(attrs) {\n        return validateObject(\"diffMatchPatch\", attrs), this._assign(\"diffMatchPatch\", attrs);\n    }\n    /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */ unset(attrs) {\n        if (!Array.isArray(attrs)) throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n        return this.operations = Object.assign({}, this.operations, {\n            unset: attrs\n        }), this;\n    }\n    /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */ inc(attrs) {\n        return this._assign(\"inc\", attrs);\n    }\n    /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */ dec(attrs) {\n        return this._assign(\"dec\", attrs);\n    }\n    /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */ insert(at, selector, items) {\n        return validateInsert(at, selector, items), this._assign(\"insert\", {\n            [at]: selector,\n            items\n        });\n    }\n    /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */ append(selector, items) {\n        return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n    }\n    /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */ prepend(selector, items) {\n        return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n    }\n    /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */ splice(selector, start, deleteCount, items) {\n        const delAll = typeof deleteCount > \"u\" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount, rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n        return this.insert(\"replace\", rangeSelector, items || []);\n    }\n    /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */ ifRevisionId(rev) {\n        return this.operations.ifRevisionID = rev, this;\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ serialize() {\n        return {\n            ...getSelection(this.selection),\n            ...this.operations\n        };\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the patch of all operations\n   */ reset() {\n        return this.operations = {}, this;\n    }\n    _assign(op, props) {\n        let merge = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n        return validateObject(op, props), this.operations = Object.assign({}, this.operations, {\n            [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n        }), this;\n    }\n    _set(op, props) {\n        return this._assign(op, props, !1);\n    }\n    constructor(selection, operations = {}){\n        this.selection = selection, this.operations = operations;\n    }\n}\nvar _client = /*#__PURE__*/ new WeakMap();\nclass ObservablePatch extends BasePatch {\n    /**\n   * Clones the patch\n   */ clone() {\n        return new ObservablePatch(this.selection, {\n            ...this.operations\n        }, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client));\n    }\n    commit(options) {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client)) throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        const returnFirst = typeof this.selection == \"string\", opts = Object.assign({\n            returnFirst,\n            returnDocuments: !0\n        }, options);\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n    constructor(selection, operations, client){\n        var _temp;\n        _temp = super(selection, operations), (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client, {\n            writable: true,\n            value: void 0\n        }), _temp, (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client, client);\n    }\n}\nvar _client1 = /*#__PURE__*/ new WeakMap();\nclass Patch extends BasePatch {\n    /**\n   * Clones the patch\n   */ clone() {\n        return new Patch(this.selection, {\n            ...this.operations\n        }, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client1));\n    }\n    commit(options) {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client1)) throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        const returnFirst = typeof this.selection == \"string\", opts = Object.assign({\n            returnFirst,\n            returnDocuments: !0\n        }, options);\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client1).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n    constructor(selection, operations, client){\n        var _temp;\n        _temp = super(selection, operations), (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client1, {\n            writable: true,\n            value: void 0\n        }), _temp, (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client1, client);\n    }\n}\nconst defaultMutateOptions = {\n    returnDocuments: !1\n};\nclass BaseTransaction {\n    /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */ create(doc) {\n        return validateObject(\"create\", doc), this._add({\n            create: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */ createIfNotExists(doc) {\n        const op = \"createIfNotExists\";\n        return validateObject(op, doc), requireDocumentId(op, doc), this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */ createOrReplace(doc) {\n        const op = \"createOrReplace\";\n        return validateObject(op, doc), requireDocumentId(op, doc), this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */ delete(documentId) {\n        return validateDocumentId(\"delete\", documentId), this._add({\n            delete: {\n                id: documentId\n            }\n        });\n    }\n    transactionId(id) {\n        return id ? (this.trxId = id, this) : this.trxId;\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ serialize() {\n        return [\n            ...this.operations\n        ];\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the transaction of all operations\n   */ reset() {\n        return this.operations = [], this;\n    }\n    _add(mut) {\n        return this.operations.push(mut), this;\n    }\n    constructor(operations = [], transactionId){\n        this.operations = operations, this.trxId = transactionId;\n    }\n}\nvar _client2 = /*#__PURE__*/ new WeakMap();\nclass Transaction extends BaseTransaction {\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new Transaction([\n            ...this.operations\n        ], (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client2), this.trxId);\n    }\n    commit(options) {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client2)) throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client2).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps == \"function\";\n        if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof Patch) return this._add({\n            patch: patchOrDocumentId.serialize()\n        });\n        if (isBuilder) {\n            const patch = patchOps(new Patch(patchOrDocumentId, {}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client2)));\n            if (!(patch instanceof Patch)) throw new Error(\"function passed to `patch()` must return the patch\");\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n    constructor(operations, client, transactionId){\n        var _temp;\n        _temp = super(operations, transactionId), (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client2, {\n            writable: true,\n            value: void 0\n        }), _temp, (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client2, client);\n    }\n}\nvar _client3 = /*#__PURE__*/ new WeakMap();\nclass ObservableTransaction extends BaseTransaction {\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new ObservableTransaction([\n            ...this.operations\n        ], (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client3), this.trxId);\n    }\n    commit(options) {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client3)) throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client3).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps == \"function\";\n        if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof ObservablePatch) return this._add({\n            patch: patchOrDocumentId.serialize()\n        });\n        if (isBuilder) {\n            const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client3)));\n            if (!(patch instanceof ObservablePatch)) throw new Error(\"function passed to `patch()` must return the patch\");\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n    constructor(operations, client, transactionId){\n        var _temp;\n        _temp = super(operations, transactionId), (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client3, {\n            writable: true,\n            value: void 0\n        }), _temp, (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client3, client);\n    }\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config) {\n    let overrides = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const headers = {}, token = overrides.token || config.token;\n    token && (headers.Authorization = \"Bearer \".concat(token)), !overrides.useGlobalApi && !config.useProjectHostname && config.projectId && (headers[projectHeader] = config.projectId);\n    const withCredentials = !!(typeof overrides.withCredentials > \"u\" ? config.token || config.withCredentials : overrides.withCredentials), timeout = typeof overrides.timeout > \"u\" ? config.timeout : overrides.timeout;\n    return Object.assign({}, overrides, {\n        headers: Object.assign({}, headers, overrides.headers || {}),\n        timeout: typeof timeout > \"u\" ? 5 * 60 * 1e3 : timeout,\n        proxy: overrides.proxy || config.proxy,\n        json: !0,\n        withCredentials,\n        fetch: typeof overrides.fetch == \"object\" && typeof config.fetch == \"object\" ? {\n            ...config.fetch,\n            ...overrides.fetch\n        } : overrides.fetch || config.fetch\n    });\n}\nconst encodeQueryString = (param)=>{\n    let { query, params = {}, options = {} } = param;\n    const searchParams = new URLSearchParams(), { tag, includeMutations, returnQuery, ...opts } = options;\n    tag && searchParams.append(\"tag\", tag), searchParams.append(\"query\", query);\n    for (const [key, value] of Object.entries(params))searchParams.append(\"$\".concat(key), JSON.stringify(value));\n    for (const [key, value] of Object.entries(opts))value && searchParams.append(key, \"\".concat(value));\n    return returnQuery === !1 && searchParams.append(\"returnQuery\", \"false\"), includeMutations === !1 && searchParams.append(\"includeMutations\", \"false\"), \"?\".concat(searchParams);\n}, excludeFalsey = (param, defValue)=>param === !1 ? void 0 : typeof param > \"u\" ? defValue : param, getMutationQuery = function() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return {\n        dryRun: options.dryRun,\n        returnIds: !0,\n        returnDocuments: excludeFalsey(options.returnDocuments, !0),\n        visibility: options.visibility || \"sync\",\n        autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n    };\n}, isResponse = (event)=>event.type === \"response\", getBody = (event)=>event.body, indexBy = (docs, attr)=>docs.reduce((indexed, doc)=>(indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query) {\n    let _params = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};\n    const stega = \"stega\" in options ? {\n        ..._stega || {},\n        ...typeof options.stega == \"boolean\" ? {\n            enabled: options.stega\n        } : options.stega || {}\n    } : _stega, params = stega.enabled ? (0,_chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_6__.stegaClean)(_params) : _params, mapResponse = options.filterResponse === !1 ? (res)=>res : (res)=>res.result, { cache, next, ...opts } = {\n        // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n        // This is necessary in React Server Components to avoid opting out of Request Memoization.\n        useAbortSignal: typeof options.signal < \"u\",\n        // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n        resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n        ...options,\n        // Default to not returning the query, unless `filterResponse` is `false`,\n        // or `returnQuery` is explicitly set. `true` is the default in Content Lake, so skip if truthy\n        returnQuery: options.filterResponse === !1 && options.returnQuery !== !1\n    }, reqOpts = typeof cache < \"u\" || typeof next < \"u\" ? {\n        ...opts,\n        fetch: {\n            cache,\n            next\n        }\n    } : opts, $request = _dataRequest(client, httpRequest, \"query\", {\n        query,\n        params\n    }, reqOpts);\n    return stega.enabled ? $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.combineLatestWith)((0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./_chunks-es/stegaEncodeSourceMap.js */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\")).then(function(n) {\n        return n.stegaEncodeSourceMap$1;\n    }).then((param)=>{\n        let { stegaEncodeSourceMap } = param;\n        return stegaEncodeSourceMap;\n    }))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((param)=>{\n        let [res, stegaEncodeSourceMap] = param;\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({\n            ...res,\n            result\n        });\n    })) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id) {\n    let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", id),\n        json: !0,\n        tag: opts.tag,\n        signal: opts.signal\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event)=>event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids) {\n    let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n        json: !0,\n        tag: opts.tag,\n        signal: opts.signal\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event)=>{\n        const indexed = indexBy(event.body.documents || [], (doc)=>doc._id);\n        return ids.map((id)=>indexed[id] || null);\n    }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n    return requireDocumentId(\"createIfNotExists\", doc), _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n    return requireDocumentId(\"createOrReplace\", doc), _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            {\n                delete: getSelection(selection)\n            }\n        ]\n    }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n    let mut;\n    mutations instanceof Patch || mutations instanceof ObservablePatch ? mut = {\n        patch: mutations.serialize()\n    } : mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mut = mutations.serialize() : mut = mutations;\n    const muts = Array.isArray(mut) ? mut : [\n        mut\n    ], transactionId = options && options.transactionId || void 0;\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: muts,\n        transactionId\n    }, options);\n}\nfunction _action(client, httpRequest, actions, options) {\n    const acts = Array.isArray(actions) ? actions : [\n        actions\n    ], transactionId = options && options.transactionId || void 0, skipCrossDatasetReferenceValidation = options && options.skipCrossDatasetReferenceValidation || void 0, dryRun = options && options.dryRun || void 0;\n    return _dataRequest(client, httpRequest, \"actions\", {\n        actions: acts,\n        transactionId,\n        skipCrossDatasetReferenceValidation,\n        dryRun\n    }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body) {\n    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n    const isMutation = endpoint === \"mutate\", isAction = endpoint === \"actions\", isQuery = endpoint === \"query\", strQuery = isMutation || isAction ? \"\" : encodeQueryString(body), useGet = !isMutation && !isAction && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : \"\", returnFirst = options.returnFirst, { timeout, token, tag, headers, returnQuery, lastLiveEventId, cacheMode } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {\n        method: useGet ? \"GET\" : \"POST\",\n        uri,\n        json: !0,\n        body: useGet ? void 0 : body,\n        query: isMutation && getMutationQuery(options),\n        timeout,\n        headers,\n        token,\n        tag,\n        returnQuery,\n        perspective: options.perspective,\n        resultSourceMap: options.resultSourceMap,\n        lastLiveEventId: Array.isArray(lastLiveEventId) ? lastLiveEventId[0] : lastLiveEventId,\n        cacheMode,\n        canUseCdn: isQuery,\n        signal: options.signal,\n        fetch: options.fetch,\n        useAbortSignal: options.useAbortSignal,\n        useCdn: options.useCdn\n    };\n    return _requestObservable(client, httpRequest, reqOptions).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(getBody), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((res)=>{\n        if (!isMutation) return res;\n        const results = res.results || [];\n        if (options.returnDocuments) return returnFirst ? results[0] && results[0].document : results.map((mut)=>mut.document);\n        const key = returnFirst ? \"documentId\" : \"documentIds\", ids = returnFirst ? results[0] && results[0].id : results.map((mut)=>mut.id);\n        return {\n            transactionId: res.transactionId,\n            results,\n            [key]: ids\n        };\n    }));\n}\nfunction _create(client, httpRequest, doc, op) {\n    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n    const mutation = {\n        [op]: doc\n    }, opts = Object.assign({\n        returnFirst: !0,\n        returnDocuments: !0\n    }, options);\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            mutation\n        ]\n    }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n    const uri = options.url || options.uri, config = client.config(), canUseCdn = typeof options.canUseCdn > \"u\" ? [\n        \"GET\",\n        \"HEAD\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n    var _options_useCdn;\n    let useCdn = ((_options_useCdn = options.useCdn) !== null && _options_useCdn !== void 0 ? _options_useCdn : config.useCdn) && canUseCdn;\n    const tag = options.tag && config.requestTagPrefix ? [\n        config.requestTagPrefix,\n        options.tag\n    ].join(\".\") : options.tag || config.requestTagPrefix;\n    if (tag && options.tag !== null && (options.query = {\n        tag: requestTag(tag),\n        ...options.query\n    }), [\n        \"GET\",\n        \"HEAD\",\n        \"POST\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n        var _options_resultSourceMap;\n        const resultSourceMap = (_options_resultSourceMap = options.resultSourceMap) !== null && _options_resultSourceMap !== void 0 ? _options_resultSourceMap : config.resultSourceMap;\n        resultSourceMap !== void 0 && resultSourceMap !== !1 && (options.query = {\n            resultSourceMap,\n            ...options.query\n        });\n        const perspectiveOption = options.perspective || config.perspective;\n        typeof perspectiveOption < \"u\" && (validateApiPerspective(perspectiveOption), options.query = {\n            perspective: Array.isArray(perspectiveOption) ? perspectiveOption.join(\",\") : perspectiveOption,\n            ...options.query\n        }, perspectiveOption === \"previewDrafts\" && useCdn && (useCdn = !1, printCdnPreviewDraftsWarning())), options.lastLiveEventId && (options.query = {\n            ...options.query,\n            lastLiveEventId: options.lastLiveEventId\n        }), options.returnQuery === !1 && (options.query = {\n            returnQuery: \"false\",\n            ...options.query\n        }), useCdn && options.cacheMode == \"noStale\" && (options.query = {\n            cacheMode: \"noStale\",\n            ...options.query\n        });\n    }\n    const reqOptions = requestOptions(config, Object.assign({}, options, {\n        url: _getUrl(client, uri, useCdn)\n    })), request = new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber)=>httpRequest(reqOptions, config.requester).subscribe(subscriber));\n    return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event)=>event.body));\n}\nfunction _getDataUrl(client, operation, path) {\n    const config = client.config(), catalog = hasDataset(config), baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n    return \"/data\".concat(path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri) {\n    let canUseCdn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n    const { url, cdnUrl } = client.config();\n    return \"\".concat(canUseCdn ? cdnUrl : url, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n    return (input)=>new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            const abort = ()=>observer.error(_createAbortError(signal));\n            if (signal && signal.aborted) {\n                abort();\n                return;\n            }\n            const subscription = input.subscribe(observer);\n            return signal.addEventListener(\"abort\", abort), ()=>{\n                signal.removeEventListener(\"abort\", abort), subscription.unsubscribe();\n            };\n        });\n}\nconst isDomExceptionSupported = !!globalThis.DOMException;\nfunction _createAbortError(signal) {\n    var _signal_reason;\n    if (isDomExceptionSupported) return new DOMException((_signal_reason = signal === null || signal === void 0 ? void 0 : signal.reason) !== null && _signal_reason !== void 0 ? _signal_reason : \"The operation was aborted.\", \"AbortError\");\n    var _signal_reason1;\n    const error = new Error((_signal_reason1 = signal === null || signal === void 0 ? void 0 : signal.reason) !== null && _signal_reason1 !== void 0 ? _signal_reason1 : \"The operation was aborted.\");\n    return error.name = \"AbortError\", error;\n}\nvar _client4 = /*#__PURE__*/ new WeakMap(), _httpRequest = /*#__PURE__*/ new WeakMap();\nclass ObservableAssetsClient {\n    upload(assetType, body, options) {\n        return _upload((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client4), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest), assetType, body, options);\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client4, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client4, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest, httpRequest);\n    }\n}\nvar _client5 = /*#__PURE__*/ new WeakMap(), _httpRequest1 = /*#__PURE__*/ new WeakMap();\nclass AssetsClient {\n    upload(assetType, body, options) {\n        const observable2 = _upload((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client5), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest1), assetType, body, options);\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(observable2.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event)=>event.body.document)));\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client5, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client5, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest1, httpRequest);\n    }\n}\nfunction _upload(client, httpRequest, assetType, body) {\n    let opts = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n    validateAssetType(assetType);\n    let meta = opts.extract || void 0;\n    meta && !meta.length && (meta = [\n        \"none\"\n    ]);\n    const dataset2 = hasDataset(client.config()), assetEndpoint = assetType === \"image\" ? \"images\" : \"files\", options = optionsFromFile(opts, body), { tag, label, title, description, creditLine, filename, source } = options, query = {\n        label,\n        title,\n        description,\n        filename,\n        meta,\n        creditLine\n    };\n    return source && (query.sourceId = source.id, query.sourceName = source.name, query.sourceUrl = source.url), _requestObservable(client, httpRequest, {\n        tag,\n        method: \"POST\",\n        timeout: options.timeout || 0,\n        uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset2),\n        headers: options.contentType ? {\n            \"Content-Type\": options.contentType\n        } : {},\n        query,\n        body\n    });\n}\nfunction optionsFromFile(opts, file) {\n    return typeof File > \"u\" || !(file instanceof File) ? opts : Object.assign({\n        filename: opts.preserveFilename === !1 ? void 0 : file.name,\n        contentType: file.type\n    }, opts);\n}\nvar defaults = (obj, defaults2)=>Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop)=>(target[prop] = typeof obj[prop] > \"u\" ? defaults2[prop] : obj[prop], target), {});\nconst pick = (obj, props)=>props.reduce((selection, prop)=>(typeof obj[prop] > \"u\" || (selection[prop] = obj[prop]), selection), {}), MAX_URL_LENGTH = 14800, possibleOptions = [\n    \"includePreviousRevision\",\n    \"includeResult\",\n    \"includeMutations\",\n    \"visibility\",\n    \"effectFormat\",\n    \"tag\"\n], defaultOptions = {\n    includeResult: !0\n};\nfunction _listen(query, params) {\n    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const { url, token, withCredentials, requestTagPrefix } = this.config(), tag = opts.tag && requestTagPrefix ? [\n        requestTagPrefix,\n        opts.tag\n    ].join(\".\") : opts.tag, options = {\n        ...defaults(opts, defaultOptions),\n        tag\n    }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({\n        query,\n        params,\n        options: {\n            tag,\n            ...listenOpts\n        }\n    }), uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n    if (uri.length > MAX_URL_LENGTH) return new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>observer.error(new Error(\"Query too large for listener\")));\n    const listenFor = options.events ? options.events : [\n        \"mutation\"\n    ], shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1, esOptions = {};\n    return (token || withCredentials) && (esOptions.withCredentials = !0), token && (esOptions.headers = {\n        Authorization: \"Bearer \".concat(token)\n    }), new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n        let es, reconnectTimer, stopped = !1, unsubscribed = !1;\n        open();\n        function onError() {\n            stopped || (emitReconnect(), !stopped && es.readyState === es.CLOSED && (unsubscribe(), clearTimeout(reconnectTimer), reconnectTimer = setTimeout(open, 100)));\n        }\n        function onChannelError(err) {\n            observer.error(cooerceError(err));\n        }\n        function onMessage(evt) {\n            const event = parseEvent$1(evt);\n            return event instanceof Error ? observer.error(event) : observer.next(event);\n        }\n        function onDisconnect() {\n            stopped = !0, unsubscribe(), observer.complete();\n        }\n        function unsubscribe() {\n            es && (es.removeEventListener(\"error\", onError), es.removeEventListener(\"channelError\", onChannelError), es.removeEventListener(\"disconnect\", onDisconnect), listenFor.forEach((type)=>es.removeEventListener(type, onMessage)), es.close());\n        }\n        function emitReconnect() {\n            shouldEmitReconnect && observer.next({\n                type: \"reconnect\"\n            });\n        }\n        async function getEventSource() {\n            const { default: EventSource2 } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-node_modules_ba\"), __webpack_require__.e(\"vendor-node_modules_event-source-polyfill_src_eventsource_js-3495132d\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_a\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_e\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_motion_f\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_projection_a\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_render_V\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_r\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_value_i\"), __webpack_require__.e(\"vendor-node_modules_g\"), __webpack_require__.e(\"vendor-node_modules_motion-d\"), __webpack_require__.e(\"vendor-node_modules_next-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_app-b\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_ac\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_n\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_hot-reloader-client_js-bd9b24bf\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_R\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_components_O\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_components_Overlay_mainta-36eaec8f\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_container_B\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_rea\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_re\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_f\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_ppr-navigations_js-cb394929\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_reducers_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_s\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_det\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_d\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_h\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_i\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_n\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_s\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_micromatch_index_js-4841a4b2\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_m\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_next_react-dev-overlay_dist_client_js-4d3086b8\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_platform_platform_js-6\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-dom_cjs_react-dom_development_js-2d61d070\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-d\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_cjs_react-jsx-dev-runtime_development_js-fde795d3\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_cjs_react_development_js-651d230a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_sc\"), __webpack_require__.e(\"vendor-node_modules_next_dist_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_p\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_head-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_h\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_m\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_router_js-2ca1580e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_ad\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_o\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_p\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_r\"), __webpack_require__.e(\"vendor-node_modules_next_d\"), __webpack_require__.e(\"vendor-node_modules_po\"), __webpack_require__.e(\"vendor-node_modules_react-dom_cjs_react-dom_development_js-ac892209\"), __webpack_require__.e(\"vendor-node_modules_react-\"), __webpack_require__.e(\"vendor-node_modules_react-icons_fa_index_mjs-4d4b94e7\"), __webpack_require__.e(\"vendor-node_modules_react_c\"), __webpack_require__.e(\"vendor-node_modules_rxjs_dist_esm5_internal_N\"), __webpack_require__.e(\"vendor-node_modules_sanity_client_dist__\"), __webpack_require__.e(\"vendor-node_modules_sa\"), __webpack_require__.e(\"vendor-node_modules_styled-jsx_d\"), __webpack_require__.e(\"vendor-node_modules_s\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(app-pages-browser)/./node_modules/@sanity/eventsource/browser.js\", 19));\n            if (unsubscribed) return;\n            const evs = new EventSource2(uri, esOptions);\n            return evs.addEventListener(\"error\", onError), evs.addEventListener(\"channelError\", onChannelError), evs.addEventListener(\"disconnect\", onDisconnect), listenFor.forEach((type)=>evs.addEventListener(type, onMessage)), evs;\n        }\n        function open() {\n            getEventSource().then((eventSource)=>{\n                eventSource && (es = eventSource, unsubscribed && unsubscribe());\n            }).catch((reason)=>{\n                observer.error(reason), stop();\n            });\n        }\n        function stop() {\n            stopped = !0, unsubscribe(), unsubscribed = !0;\n        }\n        return stop;\n    });\n}\nfunction parseEvent$1(event) {\n    try {\n        const data = event.data && JSON.parse(event.data) || {};\n        return Object.assign({\n            type: event.type\n        }, data);\n    } catch (err) {\n        return err;\n    }\n}\nfunction cooerceError(err) {\n    if (err instanceof Error) return err;\n    const evt = parseEvent$1(err);\n    return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n    return err.error ? err.error.description ? err.error.description : typeof err.error == \"string\" ? err.error : JSON.stringify(err.error, null, 2) : err.message || \"Unknown listener error\";\n}\nconst requiredApiVersion = \"2021-03-26\";\nvar _client6 = /*#__PURE__*/ new WeakMap();\nclass LiveClient {\n    /**\n   * Requires `apiVersion` to be `2021-03-26` or later.\n   */ events() {\n        let { includeDrafts = !1, tag: _tag } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { projectId: projectId2, apiVersion: _apiVersion, token, withCredentials, requestTagPrefix } = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client6).config(), apiVersion = _apiVersion.replace(/^v/, \"\");\n        if (apiVersion !== \"X\" && apiVersion < requiredApiVersion) throw new Error(\"The live events API requires API version \".concat(requiredApiVersion, \" or later. The current API version is \").concat(apiVersion, \". Please update your API version to use this feature.\"));\n        if (includeDrafts && !token && !withCredentials) throw new Error(\"The live events API requires a token or withCredentials when 'includeDrafts: true'. Please update your client configuration. The token should have the lowest possible access role.\");\n        if (includeDrafts && apiVersion !== \"X\") throw new Error(\"The live events API requires API version X when 'includeDrafts: true'. This API is experimental and may change or even be removed.\");\n        const path = _getDataUrl((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client6), \"live/events\"), url = new URL((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client6).getUrl(path, !1)), tag = _tag && requestTagPrefix ? [\n            requestTagPrefix,\n            _tag\n        ].join(\".\") : _tag;\n        tag && url.searchParams.set(\"tag\", tag), includeDrafts && url.searchParams.set(\"includeDrafts\", \"true\");\n        const listenFor = [\n            \"restart\",\n            \"message\",\n            \"welcome\",\n            \"reconnect\"\n        ], esOptions = {};\n        return includeDrafts && token && (esOptions.headers = {\n            Authorization: \"Bearer \".concat(token)\n        }), includeDrafts && withCredentials && (esOptions.withCredentials = !0), new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            let es, reconnectTimer, stopped = !1, unsubscribed = !1;\n            open();\n            function onError(evt) {\n                if (!stopped) {\n                    if (\"data\" in evt) {\n                        const event = parseEvent(evt);\n                        observer.error(new Error(event.message, {\n                            cause: event\n                        }));\n                    }\n                    es.readyState === es.CLOSED && (unsubscribe(), clearTimeout(reconnectTimer), reconnectTimer = setTimeout(open, 100));\n                }\n            }\n            function onMessage(evt) {\n                const event = parseEvent(evt);\n                return event instanceof Error ? observer.error(event) : observer.next(event);\n            }\n            function unsubscribe() {\n                if (es) {\n                    es.removeEventListener(\"error\", onError);\n                    for (const type of listenFor)es.removeEventListener(type, onMessage);\n                    es.close();\n                }\n            }\n            async function getEventSource() {\n                const EventSourceImplementation = typeof EventSource > \"u\" || esOptions.headers || esOptions.withCredentials ? (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-node_modules_ba\"), __webpack_require__.e(\"vendor-node_modules_event-source-polyfill_src_eventsource_js-3495132d\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_a\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_e\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_motion_f\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_projection_a\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_render_V\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_r\"), __webpack_require__.e(\"vendor-node_modules_framer-motion_dist_es_value_i\"), __webpack_require__.e(\"vendor-node_modules_g\"), __webpack_require__.e(\"vendor-node_modules_motion-d\"), __webpack_require__.e(\"vendor-node_modules_next-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_app-b\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_ac\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_n\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_hot-reloader-client_js-bd9b24bf\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_R\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_components_O\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_components_Overlay_mainta-36eaec8f\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_container_B\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_react-dev-overlay_internal_e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_rea\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_re\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_f\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_ppr-navigations_js-cb394929\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_reducers_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_router-reducer_r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_components_s\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_det\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_d\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_h\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_i\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_n\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_client_s\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_micromatch_index_js-4841a4b2\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_m\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_next_react-dev-overlay_dist_client_js-4d3086b8\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_platform_platform_js-6\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-dom_cjs_react-dom_development_js-2d61d070\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-d\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react-r\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_cjs_react-jsx-dev-runtime_development_js-fde795d3\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_react_cjs_react_development_js-651d230a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_compiled_sc\"), __webpack_require__.e(\"vendor-node_modules_next_dist_c\"), __webpack_require__.e(\"vendor-node_modules_next_dist_p\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_head-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_h\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_m\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router-\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_router_js-2ca1580e\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_ad\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_a\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_o\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_router_utils_p\"), __webpack_require__.e(\"vendor-node_modules_next_dist_shared_lib_r\"), __webpack_require__.e(\"vendor-node_modules_next_d\"), __webpack_require__.e(\"vendor-node_modules_po\"), __webpack_require__.e(\"vendor-node_modules_react-dom_cjs_react-dom_development_js-ac892209\"), __webpack_require__.e(\"vendor-node_modules_react-\"), __webpack_require__.e(\"vendor-node_modules_react-icons_fa_index_mjs-4d4b94e7\"), __webpack_require__.e(\"vendor-node_modules_react_c\"), __webpack_require__.e(\"vendor-node_modules_rxjs_dist_esm5_internal_N\"), __webpack_require__.e(\"vendor-node_modules_sanity_client_dist__\"), __webpack_require__.e(\"vendor-node_modules_sa\"), __webpack_require__.e(\"vendor-node_modules_styled-jsx_d\"), __webpack_require__.e(\"vendor-node_modules_s\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(app-pages-browser)/./node_modules/@sanity/eventsource/browser.js\", 19))).default : EventSource;\n                if (unsubscribed) return;\n                try {\n                    if (await fetch(url, {\n                        method: \"OPTIONS\",\n                        mode: \"cors\",\n                        credentials: esOptions.withCredentials ? \"include\" : \"omit\",\n                        headers: esOptions.headers\n                    }), unsubscribed) return;\n                } catch (e) {\n                    throw new CorsOriginError({\n                        projectId: projectId2\n                    });\n                }\n                const evs = new EventSourceImplementation(url.toString(), esOptions);\n                evs.addEventListener(\"error\", onError);\n                for (const type of listenFor)evs.addEventListener(type, onMessage);\n                return evs;\n            }\n            function open() {\n                getEventSource().then((eventSource)=>{\n                    eventSource && (es = eventSource, unsubscribed && unsubscribe());\n                }).catch((reason)=>{\n                    observer.error(reason), stop();\n                });\n            }\n            function stop() {\n                stopped = !0, unsubscribe(), unsubscribed = !0;\n            }\n            return stop;\n        });\n    }\n    constructor(client){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client6, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client6, client);\n    }\n}\nfunction parseEvent(event) {\n    try {\n        const data = event.data && JSON.parse(event.data) || {};\n        return {\n            type: event.type,\n            id: event.lastEventId,\n            ...data\n        };\n    } catch (err) {\n        return err;\n    }\n}\nvar _client7 = /*#__PURE__*/ new WeakMap(), _httpRequest2 = /*#__PURE__*/ new WeakMap();\nclass ObservableDatasetsClient {\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return _modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client7), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest2), \"PUT\", name, options);\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return _modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client7), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest2), \"PATCH\", name, options);\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return _modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client7), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest2), \"DELETE\", name);\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return _request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client7), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest2), {\n            uri: \"/datasets\",\n            tag: null\n        });\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client7, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest2, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client7, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest2, httpRequest);\n    }\n}\nvar _client8 = /*#__PURE__*/ new WeakMap(), _httpRequest3 = /*#__PURE__*/ new WeakMap();\nclass DatasetsClient {\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client8), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest3), \"PUT\", name, options));\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client8), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest3), \"PATCH\", name, options));\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_modify((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client8), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest3), \"DELETE\", name));\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client8), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest3), {\n            uri: \"/datasets\",\n            tag: null\n        }));\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client8, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest3, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client8, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest3, httpRequest);\n    }\n}\nfunction _modify(client, httpRequest, method, name, options) {\n    return dataset(name), _request(client, httpRequest, {\n        method,\n        uri: \"/datasets/\".concat(name),\n        body: options,\n        tag: null\n    });\n}\nvar _client9 = /*#__PURE__*/ new WeakMap(), _httpRequest4 = /*#__PURE__*/ new WeakMap();\nclass ObservableProjectsClient {\n    list(options) {\n        const uri = (options === null || options === void 0 ? void 0 : options.includeMembers) === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n        return _request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client9), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest4), {\n            uri\n        });\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId2) {\n        return _request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client9), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest4), {\n            uri: \"/projects/\".concat(projectId2)\n        });\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client9, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest4, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client9, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest4, httpRequest);\n    }\n}\nvar _client10 = /*#__PURE__*/ new WeakMap(), _httpRequest5 = /*#__PURE__*/ new WeakMap();\nclass ProjectsClient {\n    list(options) {\n        const uri = (options === null || options === void 0 ? void 0 : options.includeMembers) === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client10), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest5), {\n            uri\n        }));\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId2) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client10), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest5), {\n            uri: \"/projects/\".concat(projectId2)\n        }));\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client10, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest5, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client10, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest5, httpRequest);\n    }\n}\nvar _client11 = /*#__PURE__*/ new WeakMap(), _httpRequest6 = /*#__PURE__*/ new WeakMap();\nclass ObservableUsersClient {\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return _request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client11), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest6), {\n            uri: \"/users/\".concat(id)\n        });\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client11, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest6, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client11, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest6, httpRequest);\n    }\n}\nvar _client12 = /*#__PURE__*/ new WeakMap(), _httpRequest7 = /*#__PURE__*/ new WeakMap();\nclass UsersClient {\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _client12), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest7), {\n            uri: \"/users/\".concat(id)\n        }));\n    }\n    constructor(client, httpRequest){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _client12, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest7, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _client12, client), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest7, httpRequest);\n    }\n}\nvar /**\n   * Private properties\n   */ _clientConfig = /*#__PURE__*/ new WeakMap(), _httpRequest8 = /*#__PURE__*/ new WeakMap();\nclass ObservableSanityClient {\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new ObservableSanityClient((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) return {\n            ...(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig)\n        };\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig) && (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig).allowReconfigure === !1) throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        return (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _clientConfig, initConfig(newConfig, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig) || {})), this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new ObservableSanityClient((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof (newConfig === null || newConfig === void 0 ? void 0 : newConfig.stega) == \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : (newConfig === null || newConfig === void 0 ? void 0 : newConfig.stega) || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return _fetch(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig).stega, query, params, options);\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return _getDocument(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), id, options);\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return _getDocuments(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), ids, options);\n    }\n    create(document, options) {\n        return _create(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), document, \"create\", options);\n    }\n    createIfNotExists(document, options) {\n        return _createIfNotExists(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), document, options);\n    }\n    createOrReplace(document, options) {\n        return _createOrReplace(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), document, options);\n    }\n    delete(selection, options) {\n        return _delete(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), selection, options);\n    }\n    mutate(operations, options) {\n        return _mutate(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), operations, options);\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(selection, operations) {\n        return new ObservablePatch(selection, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new ObservableTransaction(operations, this);\n    }\n    /**\n   * Perform action operations against the configured dataset\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */ action(operations, options) {\n        return _action(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), operations, options);\n    }\n    /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */ request(options) {\n        return _request(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8), options);\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n    constructor(httpRequest, config = defaultConfig){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _clientConfig, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest8, {\n            writable: true,\n            value: void 0\n        });\n        /**\n   * Instance properties\n   */ this.listen = _listen;\n        this.config(config), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest8, httpRequest), this.assets = new ObservableAssetsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8)), this.datasets = new ObservableDatasetsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8)), this.live = new LiveClient(this), this.projects = new ObservableProjectsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8)), this.users = new ObservableUsersClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest8));\n    }\n}\nvar /**\n   * Private properties\n   */ _clientConfig1 = /*#__PURE__*/ new WeakMap(), _httpRequest9 = /*#__PURE__*/ new WeakMap();\nclass SanityClient {\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new SanityClient((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) return {\n            ...(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig1)\n        };\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig1) && (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig1).allowReconfigure === !1) throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        return this.observable && this.observable.config(newConfig), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _clientConfig1, initConfig(newConfig, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig1) || {})), this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new SanityClient((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof (newConfig === null || newConfig === void 0 ? void 0 : newConfig.stega) == \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : (newConfig === null || newConfig === void 0 ? void 0 : newConfig.stega) || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_fetch(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _clientConfig1).stega, query, params, options));\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_getDocument(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), id, options));\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_getDocuments(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), ids, options));\n    }\n    create(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_create(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), document, \"create\", options));\n    }\n    createIfNotExists(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_createIfNotExists(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), document, options));\n    }\n    createOrReplace(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_createOrReplace(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), document, options));\n    }\n    delete(selection, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_delete(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), selection, options));\n    }\n    mutate(operations, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_mutate(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), operations, options));\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(documentId, operations) {\n        return new Patch(documentId, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new Transaction(operations, this);\n    }\n    /**\n   * Perform action operations against the configured dataset\n   * Returns a promise that resolves to the transaction result\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */ action(operations, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_action(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), operations, options));\n    }\n    /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */ request(options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), options));\n    }\n    /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */ dataRequest(endpoint, body, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_dataRequest(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9), endpoint, body, options));\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n    constructor(httpRequest, config = defaultConfig){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _clientConfig1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _httpRequest9, {\n            writable: true,\n            value: void 0\n        });\n        /**\n   * Instance properties\n   */ this.listen = _listen;\n        this.config(config), (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _httpRequest9, httpRequest), this.assets = new AssetsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9)), this.datasets = new DatasetsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9)), this.live = new LiveClient(this), this.projects = new ProjectsClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9)), this.users = new UsersClient(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _httpRequest9)), this.observable = new ObservableSanityClient(httpRequest, config);\n    }\n}\nfunction defineCreateClientExports(envMiddleware2, ClassConstructor) {\n    const defaultRequester = defineHttpRequest(envMiddleware2);\n    return {\n        requester: defaultRequester,\n        createClient: (config)=>new ClassConstructor((options, requester2)=>(requester2 || defaultRequester)({\n                    maxRedirects: 0,\n                    maxRetries: config.maxRetries,\n                    retryDelay: config.retryDelay,\n                    ...options\n                }), config)\n    };\n}\nfunction defineDeprecatedCreateClient(createClient2) {\n    return function(config) {\n        return printNoDefaultExport(), createClient2(config);\n    };\n}\nvar envMiddleware = [];\nconst exp = defineCreateClientExports(envMiddleware, SanityClient), requester = exp.requester, createClient = exp.createClient, deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n //# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/client/dist/index.browser.js\n"));

/***/ })

});