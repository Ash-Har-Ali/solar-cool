"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendor-node_modules_sanity_e"],{

/***/ "(app-pages-browser)/./node_modules/@sanity/image-url/lib/browser/image-url.umd.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/browser/image-url.umd.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n(function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    function _extends() {\n        _extends = Object.assign || function(target) {\n            for(var i = 1; i < arguments.length; i++){\n                var source = arguments[i];\n                for(var key in source){\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n            return target;\n        };\n        return _extends.apply(this, arguments);\n    }\n    function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n    }\n    function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n        return arr2;\n    }\n    function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n        var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n        if (it) return (it = it.call(o)).next.bind(it);\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            return function() {\n                if (i >= o.length) return {\n                    done: true\n                };\n                return {\n                    done: false,\n                    value: o[i++]\n                };\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var example = \"image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg\";\n    function parseAssetId(ref) {\n        var _ref$split = ref.split(\"-\"), id = _ref$split[1], dimensionString = _ref$split[2], format = _ref$split[3];\n        if (!id || !dimensionString || !format) {\n            throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + '\".');\n        }\n        var _dimensionString$spli = dimensionString.split(\"x\"), imgWidthStr = _dimensionString$spli[0], imgHeightStr = _dimensionString$spli[1];\n        var width = +imgWidthStr;\n        var height = +imgHeightStr;\n        var isValidAssetId = isFinite(width) && isFinite(height);\n        if (!isValidAssetId) {\n            throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + '\".');\n        }\n        return {\n            id: id,\n            width: width,\n            height: height,\n            format: format\n        };\n    }\n    var isRef = function isRef(src) {\n        var source = src;\n        return source ? typeof source._ref === \"string\" : false;\n    };\n    var isAsset = function isAsset(src) {\n        var source = src;\n        return source ? typeof source._id === \"string\" : false;\n    };\n    var isAssetStub = function isAssetStub(src) {\n        var source = src;\n        return source && source.asset ? typeof source.asset.url === \"string\" : false;\n    }; // Convert an asset-id, asset or image to an image record suitable for processing\n    // eslint-disable-next-line complexity\n    function parseSource(source) {\n        if (!source) {\n            return null;\n        }\n        var image;\n        if (typeof source === \"string\" && isUrl(source)) {\n            // Someone passed an existing image url?\n            image = {\n                asset: {\n                    _ref: urlToId(source)\n                }\n            };\n        } else if (typeof source === \"string\") {\n            // Just an asset id\n            image = {\n                asset: {\n                    _ref: source\n                }\n            };\n        } else if (isRef(source)) {\n            // We just got passed an asset directly\n            image = {\n                asset: source\n            };\n        } else if (isAsset(source)) {\n            // If we were passed an image asset document\n            image = {\n                asset: {\n                    _ref: source._id || \"\"\n                }\n            };\n        } else if (isAssetStub(source)) {\n            // If we were passed a partial asset (`url`, but no `_id`)\n            image = {\n                asset: {\n                    _ref: urlToId(source.asset.url)\n                }\n            };\n        } else if (typeof source.asset === \"object\") {\n            // Probably an actual image with materialized asset\n            image = _extends({}, source);\n        } else {\n            // We got something that does not look like an image, or it is an image\n            // that currently isn't sporting an asset.\n            return null;\n        }\n        var img = source;\n        if (img.crop) {\n            image.crop = img.crop;\n        }\n        if (img.hotspot) {\n            image.hotspot = img.hotspot;\n        }\n        return applyDefaults(image);\n    }\n    function isUrl(url) {\n        return /^https?:\\/\\//.test(\"\" + url);\n    }\n    function urlToId(url) {\n        var parts = url.split(\"/\").slice(-1);\n        return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, \"-$1\");\n    } // Mock crop and hotspot if image lacks it\n    function applyDefaults(image) {\n        if (image.crop && image.hotspot) {\n            return image;\n        } // We need to pad in default values for crop or hotspot\n        var result = _extends({}, image);\n        if (!result.crop) {\n            result.crop = {\n                left: 0,\n                top: 0,\n                bottom: 0,\n                right: 0\n            };\n        }\n        if (!result.hotspot) {\n            result.hotspot = {\n                x: 0.5,\n                y: 0.5,\n                height: 1.0,\n                width: 1.0\n            };\n        }\n        return result;\n    }\n    var SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n        [\n            \"width\",\n            \"w\"\n        ],\n        [\n            \"height\",\n            \"h\"\n        ],\n        [\n            \"format\",\n            \"fm\"\n        ],\n        [\n            \"download\",\n            \"dl\"\n        ],\n        [\n            \"blur\",\n            \"blur\"\n        ],\n        [\n            \"sharpen\",\n            \"sharp\"\n        ],\n        [\n            \"invert\",\n            \"invert\"\n        ],\n        [\n            \"orientation\",\n            \"or\"\n        ],\n        [\n            \"minHeight\",\n            \"min-h\"\n        ],\n        [\n            \"maxHeight\",\n            \"max-h\"\n        ],\n        [\n            \"minWidth\",\n            \"min-w\"\n        ],\n        [\n            \"maxWidth\",\n            \"max-w\"\n        ],\n        [\n            \"quality\",\n            \"q\"\n        ],\n        [\n            \"fit\",\n            \"fit\"\n        ],\n        [\n            \"crop\",\n            \"crop\"\n        ],\n        [\n            \"saturation\",\n            \"sat\"\n        ],\n        [\n            \"auto\",\n            \"auto\"\n        ],\n        [\n            \"dpr\",\n            \"dpr\"\n        ],\n        [\n            \"pad\",\n            \"pad\"\n        ]\n    ];\n    function urlForImage(options) {\n        var spec = _extends({}, options || {});\n        var source = spec.source;\n        delete spec.source;\n        var image = parseSource(source);\n        if (!image) {\n            throw new Error(\"Unable to resolve image URL from source (\" + JSON.stringify(source) + \")\");\n        }\n        var id = image.asset._ref || image.asset._id || \"\";\n        var asset = parseAssetId(id); // Compute crop rect in terms of pixel coordinates in the raw source image\n        var cropLeft = Math.round(image.crop.left * asset.width);\n        var cropTop = Math.round(image.crop.top * asset.height);\n        var crop = {\n            left: cropLeft,\n            top: cropTop,\n            width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n            height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n        }; // Compute hot spot rect in terms of pixel coordinates\n        var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n        var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n        var hotSpotCenterX = image.hotspot.x * asset.width;\n        var hotSpotCenterY = image.hotspot.y * asset.height;\n        var hotspot = {\n            left: hotSpotCenterX - hotSpotHorizontalRadius,\n            top: hotSpotCenterY - hotSpotVerticalRadius,\n            right: hotSpotCenterX + hotSpotHorizontalRadius,\n            bottom: hotSpotCenterY + hotSpotVerticalRadius\n        }; // If irrelevant, or if we are requested to: don't perform crop/fit based on\n        // the crop/hotspot.\n        if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n            spec = _extends({}, spec, fit({\n                crop: crop,\n                hotspot: hotspot\n            }, spec));\n        }\n        return specToImageUrl(_extends({}, spec, {\n            asset: asset\n        }));\n    } // eslint-disable-next-line complexity\n    function specToImageUrl(spec) {\n        var cdnUrl = (spec.baseUrl || \"https://cdn.sanity.io\").replace(/\\/+$/, \"\");\n        var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format;\n        var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n        var params = [];\n        if (spec.rect) {\n            // Only bother url with a crop if it actually crops anything\n            var _spec$rect = spec.rect, left = _spec$rect.left, top = _spec$rect.top, width = _spec$rect.width, height = _spec$rect.height;\n            var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n            if (isEffectiveCrop) {\n                params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n            }\n        }\n        if (spec.bg) {\n            params.push(\"bg=\" + spec.bg);\n        }\n        if (spec.focalPoint) {\n            params.push(\"fp-x=\" + spec.focalPoint.x);\n            params.push(\"fp-y=\" + spec.focalPoint.y);\n        }\n        var flip = [\n            spec.flipHorizontal && \"h\",\n            spec.flipVertical && \"v\"\n        ].filter(Boolean).join(\"\");\n        if (flip) {\n            params.push(\"flip=\" + flip);\n        } // Map from spec name to url param name, and allow using the actual param name as an alternative\n        SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {\n            var specName = mapping[0], param = mapping[1];\n            if (typeof spec[specName] !== \"undefined\") {\n                params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n            } else if (typeof spec[param] !== \"undefined\") {\n                params.push(param + \"=\" + encodeURIComponent(spec[param]));\n            }\n        });\n        if (params.length === 0) {\n            return baseUrl;\n        }\n        return baseUrl + \"?\" + params.join(\"&\");\n    }\n    function fit(source, spec) {\n        var cropRect;\n        var imgWidth = spec.width;\n        var imgHeight = spec.height; // If we are not constraining the aspect ratio, we'll just use the whole crop\n        if (!(imgWidth && imgHeight)) {\n            return {\n                width: imgWidth,\n                height: imgHeight,\n                rect: source.crop\n            };\n        }\n        var crop = source.crop;\n        var hotspot = source.hotspot; // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n        var desiredAspectRatio = imgWidth / imgHeight;\n        var cropAspectRatio = crop.width / crop.height;\n        if (cropAspectRatio > desiredAspectRatio) {\n            // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n            var height = Math.round(crop.height);\n            var width = Math.round(height * desiredAspectRatio);\n            var top = Math.max(0, Math.round(crop.top)); // Center output horizontally over hotspot\n            var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n            var left = Math.max(0, Math.round(hotspotXCenter - width / 2)); // Keep output within crop\n            if (left < crop.left) {\n                left = crop.left;\n            } else if (left + width > crop.left + crop.width) {\n                left = crop.left + crop.width - width;\n            }\n            cropRect = {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            };\n        } else {\n            // The crop is taller than the desired ratio, we are cutting from top and bottom\n            var _width = crop.width;\n            var _height = Math.round(_width / desiredAspectRatio);\n            var _left = Math.max(0, Math.round(crop.left)); // Center output vertically over hotspot\n            var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n            var _top = Math.max(0, Math.round(hotspotYCenter - _height / 2)); // Keep output rect within crop\n            if (_top < crop.top) {\n                _top = crop.top;\n            } else if (_top + _height > crop.top + crop.height) {\n                _top = crop.top + crop.height - _height;\n            }\n            cropRect = {\n                left: _left,\n                top: _top,\n                width: _width,\n                height: _height\n            };\n        }\n        return {\n            width: imgWidth,\n            height: imgHeight,\n            rect: cropRect\n        };\n    } // For backwards-compatibility\n    var validFits = [\n        \"clip\",\n        \"crop\",\n        \"fill\",\n        \"fillmax\",\n        \"max\",\n        \"scale\",\n        \"min\"\n    ];\n    var validCrops = [\n        \"top\",\n        \"bottom\",\n        \"left\",\n        \"right\",\n        \"center\",\n        \"focalpoint\",\n        \"entropy\"\n    ];\n    var validAutoModes = [\n        \"format\"\n    ];\n    function isSanityModernClientLike(client) {\n        return client && \"config\" in client ? typeof client.config === \"function\" : false;\n    }\n    function isSanityClientLike(client) {\n        return client && \"clientConfig\" in client ? typeof client.clientConfig === \"object\" : false;\n    }\n    function rewriteSpecName(key) {\n        var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n        for(var _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done;){\n            var entry = _step.value;\n            var specName = entry[0], param = entry[1];\n            if (key === specName || key === param) {\n                return specName;\n            }\n        }\n        return key;\n    }\n    function urlBuilder(options) {\n        // Did we get a modernish client?\n        if (isSanityModernClientLike(options)) {\n            // Inherit config from client\n            var _options$config = options.config(), apiUrl = _options$config.apiHost, projectId = _options$config.projectId, dataset = _options$config.dataset;\n            var apiHost = apiUrl || \"https://api.sanity.io\";\n            return new ImageUrlBuilder(null, {\n                baseUrl: apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n                projectId: projectId,\n                dataset: dataset\n            });\n        } // Did we get a SanityClient?\n        var client = options;\n        if (isSanityClientLike(client)) {\n            // Inherit config from client\n            var _client$clientConfig = client.clientConfig, _apiUrl = _client$clientConfig.apiHost, _projectId = _client$clientConfig.projectId, _dataset = _client$clientConfig.dataset;\n            var _apiHost = _apiUrl || \"https://api.sanity.io\";\n            return new ImageUrlBuilder(null, {\n                baseUrl: _apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n                projectId: _projectId,\n                dataset: _dataset\n            });\n        } // Or just accept the options as given\n        return new ImageUrlBuilder(null, options);\n    }\n    var ImageUrlBuilder = /*#__PURE__*/ function() {\n        function ImageUrlBuilder(parent, options) {\n            this.options = void 0;\n            this.options = parent ? _extends({}, parent.options || {}, options || {}) // Merge parent options\n             : _extends({}, options || {}); // Copy options\n        }\n        var _proto = ImageUrlBuilder.prototype;\n        _proto.withOptions = function withOptions(options) {\n            var baseUrl = options.baseUrl || this.options.baseUrl;\n            var newOptions = {\n                baseUrl: baseUrl\n            };\n            for(var key in options){\n                if (options.hasOwnProperty(key)) {\n                    var specKey = rewriteSpecName(key);\n                    newOptions[specKey] = options[key];\n                }\n            }\n            return new ImageUrlBuilder(this, _extends({\n                baseUrl: baseUrl\n            }, newOptions));\n        } // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n        ;\n        _proto.image = function image(source) {\n            return this.withOptions({\n                source: source\n            });\n        } // Specify the dataset\n        ;\n        _proto.dataset = function dataset(_dataset2) {\n            return this.withOptions({\n                dataset: _dataset2\n            });\n        } // Specify the projectId\n        ;\n        _proto.projectId = function projectId(_projectId2) {\n            return this.withOptions({\n                projectId: _projectId2\n            });\n        } // Specify background color\n        ;\n        _proto.bg = function bg(_bg) {\n            return this.withOptions({\n                bg: _bg\n            });\n        } // Set DPR scaling factor\n        ;\n        _proto.dpr = function dpr(_dpr) {\n            // A DPR of 1 is the default - so only include it if we have a different value\n            return this.withOptions(_dpr && _dpr !== 1 ? {\n                dpr: _dpr\n            } : {});\n        } // Specify the width of the image in pixels\n        ;\n        _proto.width = function width(_width) {\n            return this.withOptions({\n                width: _width\n            });\n        } // Specify the height of the image in pixels\n        ;\n        _proto.height = function height(_height) {\n            return this.withOptions({\n                height: _height\n            });\n        } // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n        ;\n        _proto.focalPoint = function focalPoint(x, y) {\n            return this.withOptions({\n                focalPoint: {\n                    x: x,\n                    y: y\n                }\n            });\n        };\n        _proto.maxWidth = function maxWidth(_maxWidth) {\n            return this.withOptions({\n                maxWidth: _maxWidth\n            });\n        };\n        _proto.minWidth = function minWidth(_minWidth) {\n            return this.withOptions({\n                minWidth: _minWidth\n            });\n        };\n        _proto.maxHeight = function maxHeight(_maxHeight) {\n            return this.withOptions({\n                maxHeight: _maxHeight\n            });\n        };\n        _proto.minHeight = function minHeight(_minHeight) {\n            return this.withOptions({\n                minHeight: _minHeight\n            });\n        } // Specify width and height in pixels\n        ;\n        _proto.size = function size(width, height) {\n            return this.withOptions({\n                width: width,\n                height: height\n            });\n        } // Specify blur between 0 and 100\n        ;\n        _proto.blur = function blur(_blur) {\n            return this.withOptions({\n                blur: _blur\n            });\n        };\n        _proto.sharpen = function sharpen(_sharpen) {\n            return this.withOptions({\n                sharpen: _sharpen\n            });\n        } // Specify the desired rectangle of the image\n        ;\n        _proto.rect = function rect(left, top, width, height) {\n            return this.withOptions({\n                rect: {\n                    left: left,\n                    top: top,\n                    width: width,\n                    height: height\n                }\n            });\n        } // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n        ;\n        _proto.format = function format(_format) {\n            return this.withOptions({\n                format: _format\n            });\n        };\n        _proto.invert = function invert(_invert) {\n            return this.withOptions({\n                invert: _invert\n            });\n        } // Rotation in degrees 0, 90, 180, 270\n        ;\n        _proto.orientation = function orientation(_orientation) {\n            return this.withOptions({\n                orientation: _orientation\n            });\n        } // Compression quality 0-100\n        ;\n        _proto.quality = function quality(_quality) {\n            return this.withOptions({\n                quality: _quality\n            });\n        } // Make it a download link. Parameter is default filename.\n        ;\n        _proto.forceDownload = function forceDownload(download) {\n            return this.withOptions({\n                download: download\n            });\n        } // Flip image horizontally\n        ;\n        _proto.flipHorizontal = function flipHorizontal() {\n            return this.withOptions({\n                flipHorizontal: true\n            });\n        } // Flip image vertically\n        ;\n        _proto.flipVertical = function flipVertical() {\n            return this.withOptions({\n                flipVertical: true\n            });\n        } // Ignore crop/hotspot from image record, even when present\n        ;\n        _proto.ignoreImageParams = function ignoreImageParams() {\n            return this.withOptions({\n                ignoreImageParams: true\n            });\n        };\n        _proto.fit = function fit(value) {\n            if (validFits.indexOf(value) === -1) {\n                throw new Error('Invalid fit mode \"' + value + '\"');\n            }\n            return this.withOptions({\n                fit: value\n            });\n        };\n        _proto.crop = function crop(value) {\n            if (validCrops.indexOf(value) === -1) {\n                throw new Error('Invalid crop mode \"' + value + '\"');\n            }\n            return this.withOptions({\n                crop: value\n            });\n        } // Saturation\n        ;\n        _proto.saturation = function saturation(_saturation) {\n            return this.withOptions({\n                saturation: _saturation\n            });\n        };\n        _proto.auto = function auto(value) {\n            if (validAutoModes.indexOf(value) === -1) {\n                throw new Error('Invalid auto mode \"' + value + '\"');\n            }\n            return this.withOptions({\n                auto: value\n            });\n        } // Specify the number of pixels to pad the image\n        ;\n        _proto.pad = function pad(_pad) {\n            return this.withOptions({\n                pad: _pad\n            });\n        } // Gets the url based on the submitted parameters\n        ;\n        _proto.url = function url() {\n            return urlForImage(this.options);\n        } // Alias for url()\n        ;\n        _proto.toString = function toString() {\n            return this.url();\n        };\n        return ImageUrlBuilder;\n    }();\n    return urlBuilder;\n}); //# sourceMappingURL=image-url.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/image-url/lib/browser/image-url.umd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@sanity/eventsource/browser.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sanity/eventsource/browser.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = __webpack_require__(/*! event-source-polyfill */ \"(app-pages-browser)/./node_modules/event-source-polyfill/src/eventsource.js\").EventSourcePolyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2V2ZW50c291cmNlL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxvS0FBcUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvZXZlbnRzb3VyY2UvYnJvd3Nlci5qcz85NmEzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnQtc291cmNlLXBvbHlmaWxsJykuRXZlbnRTb3VyY2VQb2x5ZmlsbFxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiRXZlbnRTb3VyY2VQb2x5ZmlsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/eventsource/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@sanity/preview-kit/dist/client/createClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sanity/preview-kit/dist/client/createClient.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: function() { return /* binding */ r; }\n/* harmony export */ });\n/* harmony import */ var _sanity_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/client */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/index.browser.js\");\n/* harmony import */ var _sanity_client_stega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/client/stega */ \"(app-pages-browser)/./node_modules/@sanity/client/dist/stega.browser.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\n\n\nconst r = (r)=>{\n    var a, c;\n    const { encodeSourceMap: i = n(), encodeSourceMapAtPath: l, studioUrl: u = o(), logger: s, ...p } = r;\n    let d = !0 === i;\n    if (\"auto\" === i && (d = function() {\n        try {\n            return \"preview\" === /* unsupported import.meta.env.VERCEL_ENV */ undefined.VERCEL_ENV;\n        } catch (e) {}\n        try {\n            return \"preview\" === process.env.VERCEL_ENV;\n        } catch (e) {}\n        return !1;\n    }()), \"string\" == typeof i && \"auto\" !== i) throw new Error(\"Invalid value for encodeSourceMap: \".concat(i, \". Did you mean 'auto'?\"));\n    try {\n        if (d && !1 !== r.resultSourceMap) return u ? (null == (c = null == s ? void 0 : s.debug) || c.call(s, \"[@sanity/preview-kit]: Creating source map enabled client\"), (0,_sanity_client_stega__WEBPACK_IMPORTED_MODULE_0__.createClient)({\n            ...p,\n            resultSourceMap: r.resultSourceMap ? r.resultSourceMap : \"withKeyArraySelector\",\n            stega: {\n                enabled: !0,\n                studioUrl: u,\n                logger: s,\n                filter: l ? (e)=>l({\n                        path: e.sourcePath,\n                        filterDefault: ()=>e.filterDefault(e)\n                    }) : void 0\n            }\n        })) : (null == (a = null == s ? void 0 : s.error) || a.call(s, \"[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client\"), (0,_sanity_client__WEBPACK_IMPORTED_MODULE_1__.createClient)(p));\n    } catch (e) {\n        console.error(\"[@sanity/preview-kit]: Error creating client\", e, \"falling back to non-embedded sourcemap mode\");\n    }\n    return (0,_sanity_client__WEBPACK_IMPORTED_MODULE_1__.createClient)(p);\n};\nfunction n() {\n    try {\n        return \"true\" === /* unsupported import.meta.env.SANITY_SOURCE_MAP */ undefined.SANITY_SOURCE_MAP;\n    } catch (e) {}\n    try {\n        return \"true\" === process.env.SANITY_SOURCE_MAP;\n    } catch (e) {}\n    return !1;\n}\nfunction o() {\n    try {\n        return /* unsupported import.meta.env.SANITY_STUDIO_URL */ undefined.SANITY_STUDIO_URL;\n    } catch (e) {}\n    try {\n        return process.env.SANITY_STUDIO_URL;\n    } catch (e) {}\n}\n //# sourceMappingURL=createClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L3ByZXZpZXcta2l0L2Rpc3QvY2xpZW50L2NyZWF0ZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQW9EO0FBQUEsTUFBTUcsSUFBRUEsQ0FBQUE7SUFBSSxJQUFJQyxHQUFFQztJQUFFLE1BQUssRUFBQ0MsaUJBQWdCQyxJQUFFQyxHQUFHLEVBQUNDLHVCQUFzQkMsQ0FBQyxFQUFDQyxXQUFVQyxJQUFFQyxHQUFHLEVBQUNDLFFBQU9DLENBQUMsRUFBQyxHQUFHQyxHQUFFLEdBQUNiO0lBQUUsSUFBSWMsSUFBRSxDQUFDLE1BQUlWO0lBQUUsSUFBRyxXQUFTQSxLQUFJVSxDQUFBQSxJQUFFO1FBQVcsSUFBRztZQUFDLE9BQU0sY0FBWSxpRUFBMEI7UUFBQSxFQUFDLFVBQUssQ0FBQztRQUFDLElBQUc7WUFBQyxPQUFNLGNBQVlHLE9BQU9BLENBQUNGLEdBQUcsQ0FBQ0MsVUFBVTtRQUFBLEVBQUMsVUFBSyxDQUFDO1FBQUMsT0FBTSxDQUFDO0lBQUMsR0FBRSxHQUFHLFlBQVUsT0FBT1osS0FBRyxXQUFTQSxHQUFFLE1BQU0sSUFBSWMsTUFBTSxzQ0FBc0NDLE1BQU0sQ0FBQ2YsR0FBRTtJQUEyQixJQUFHO1FBQUMsSUFBR1UsS0FBRyxDQUFDLE1BQUlkLEVBQUVvQixlQUFlLEVBQUMsT0FBT1gsSUFBRyxTQUFPUCxDQUFBQSxJQUFFLFFBQU1VLElBQUUsS0FBSyxJQUFFQSxFQUFFUyxLQUFLLEtBQUduQixFQUFFb0IsSUFBSSxDQUFDVixHQUFFLDhEQUE2RGIsa0VBQUNBLENBQUM7WUFBQyxHQUFHYyxDQUFDO1lBQUNPLGlCQUFnQnBCLEVBQUVvQixlQUFlLEdBQUNwQixFQUFFb0IsZUFBZSxHQUFDO1lBQXVCRyxPQUFNO2dCQUFDQyxTQUFRLENBQUM7Z0JBQUVoQixXQUFVQztnQkFBRUUsUUFBT0M7Z0JBQUVhLFFBQU9sQixJQUFFVCxDQUFBQSxJQUFHUyxFQUFFO3dCQUFDbUIsTUFBSzVCLEVBQUU2QixVQUFVO3dCQUFDQyxlQUFjLElBQUk5QixFQUFFOEIsYUFBYSxDQUFDOUI7b0JBQUUsS0FBRyxLQUFLO1lBQUM7UUFBQyxFQUFDLElBQUksU0FBT0csQ0FBQUEsSUFBRSxRQUFNVyxJQUFFLEtBQUssSUFBRUEsRUFBRWlCLEtBQUssS0FBRzVCLEVBQUVxQixJQUFJLENBQUNWLEdBQUUsc0lBQXFJZCw0REFBQ0EsQ0FBQ2UsRUFBQztJQUFFLEVBQUMsT0FBTWYsR0FBRTtRQUFDZ0MsUUFBUUQsS0FBSyxDQUFDLGdEQUErQy9CLEdBQUU7SUFBOEM7SUFBQyxPQUFPQSw0REFBQ0EsQ0FBQ2U7QUFBRTtBQUFFLFNBQVNSO0lBQUksSUFBRztRQUFDLE9BQU0sV0FBUywrRUFBaUM7SUFBQSxFQUFDLFVBQUssQ0FBQztJQUFDLElBQUc7UUFBQyxPQUFNLFdBQVNZLE9BQU9BLENBQUNGLEdBQUcsQ0FBQ2dCLGlCQUFpQjtJQUFBLEVBQUMsVUFBSyxDQUFDO0lBQUMsT0FBTSxDQUFDO0FBQUM7QUFBQyxTQUFTckI7SUFBSSxJQUFHO1FBQUMsT0FBTywrRUFBaUM7SUFBQSxFQUFDLFVBQUssQ0FBQztJQUFDLElBQUc7UUFBQyxPQUFPTyxPQUFPQSxDQUFDRixHQUFHLENBQUNpQixpQkFBaUI7SUFBQSxFQUFDLFVBQUssQ0FBQztBQUFDO0FBQTJCLENBQ3g1Qyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvcHJldmlldy1raXQvZGlzdC9jbGllbnQvY3JlYXRlQ2xpZW50LmpzPzNiYjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e2NyZWF0ZUNsaWVudCBhcyBlfWZyb21cIkBzYW5pdHkvY2xpZW50XCI7aW1wb3J0e2NyZWF0ZUNsaWVudCBhcyB0fWZyb21cIkBzYW5pdHkvY2xpZW50L3N0ZWdhXCI7Y29uc3Qgcj1yPT57dmFyIGEsYztjb25zdHtlbmNvZGVTb3VyY2VNYXA6aT1uKCksZW5jb2RlU291cmNlTWFwQXRQYXRoOmwsc3R1ZGlvVXJsOnU9bygpLGxvZ2dlcjpzLC4uLnB9PXI7bGV0IGQ9ITA9PT1pO2lmKFwiYXV0b1wiPT09aSYmKGQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuXCJwcmV2aWV3XCI9PT1pbXBvcnQubWV0YS5lbnYuVkVSQ0VMX0VOVn1jYXRjaHt9dHJ5e3JldHVyblwicHJldmlld1wiPT09cHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVn1jYXRjaHt9cmV0dXJuITF9KCkpLFwic3RyaW5nXCI9PXR5cGVvZiBpJiZcImF1dG9cIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgZW5jb2RlU291cmNlTWFwOiBcIi5jb25jYXQoaSxcIi4gRGlkIHlvdSBtZWFuICdhdXRvJz9cIikpO3RyeXtpZihkJiYhMSE9PXIucmVzdWx0U291cmNlTWFwKXJldHVybiB1PyhudWxsPT0oYz1udWxsPT1zP3ZvaWQgMDpzLmRlYnVnKXx8Yy5jYWxsKHMsXCJbQHNhbml0eS9wcmV2aWV3LWtpdF06IENyZWF0aW5nIHNvdXJjZSBtYXAgZW5hYmxlZCBjbGllbnRcIiksdCh7Li4ucCxyZXN1bHRTb3VyY2VNYXA6ci5yZXN1bHRTb3VyY2VNYXA/ci5yZXN1bHRTb3VyY2VNYXA6XCJ3aXRoS2V5QXJyYXlTZWxlY3RvclwiLHN0ZWdhOntlbmFibGVkOiEwLHN0dWRpb1VybDp1LGxvZ2dlcjpzLGZpbHRlcjpsP2U9Pmwoe3BhdGg6ZS5zb3VyY2VQYXRoLGZpbHRlckRlZmF1bHQ6KCk9PmUuZmlsdGVyRGVmYXVsdChlKX0pOnZvaWQgMH19KSk6KG51bGw9PShhPW51bGw9PXM/dm9pZCAwOnMuZXJyb3IpfHxhLmNhbGwocyxcIltAc2FuaXR5L3ByZXZpZXcta2l0XTogQ29udGVudCBzb3VyY2UgbWFwIGVuYWJsZWQgY2xpZW50IGlzIGVuYWJsZWQsIGJ1dCBubyBzdHVkaW9VcmwgaXMgcHJvdmlkZWQuIEZhbGxpbmcgYmFjayB0byBAc2FuaXR5L2NsaWVudFwiKSxlKHApKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwiW0BzYW5pdHkvcHJldmlldy1raXRdOiBFcnJvciBjcmVhdGluZyBjbGllbnRcIixlLFwiZmFsbGluZyBiYWNrIHRvIG5vbi1lbWJlZGRlZCBzb3VyY2VtYXAgbW9kZVwiKX1yZXR1cm4gZShwKX07ZnVuY3Rpb24gbigpe3RyeXtyZXR1cm5cInRydWVcIj09PWltcG9ydC5tZXRhLmVudi5TQU5JVFlfU09VUkNFX01BUH1jYXRjaHt9dHJ5e3JldHVyblwidHJ1ZVwiPT09cHJvY2Vzcy5lbnYuU0FOSVRZX1NPVVJDRV9NQVB9Y2F0Y2h7fXJldHVybiExfWZ1bmN0aW9uIG8oKXt0cnl7cmV0dXJuIGltcG9ydC5tZXRhLmVudi5TQU5JVFlfU1RVRElPX1VSTH1jYXRjaHt9dHJ5e3JldHVybiBwcm9jZXNzLmVudi5TQU5JVFlfU1RVRElPX1VSTH1jYXRjaHt9fWV4cG9ydHtyIGFzIGNyZWF0ZUNsaWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVDbGllbnQuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiZSIsInQiLCJyIiwiYSIsImMiLCJlbmNvZGVTb3VyY2VNYXAiLCJpIiwibiIsImVuY29kZVNvdXJjZU1hcEF0UGF0aCIsImwiLCJzdHVkaW9VcmwiLCJ1IiwibyIsImxvZ2dlciIsInMiLCJwIiwiZCIsImVudiIsIlZFUkNFTF9FTlYiLCJwcm9jZXNzIiwiRXJyb3IiLCJjb25jYXQiLCJyZXN1bHRTb3VyY2VNYXAiLCJkZWJ1ZyIsImNhbGwiLCJzdGVnYSIsImVuYWJsZWQiLCJmaWx0ZXIiLCJwYXRoIiwic291cmNlUGF0aCIsImZpbHRlckRlZmF1bHQiLCJlcnJvciIsImNvbnNvbGUiLCJTQU5JVFlfU09VUkNFX01BUCIsIlNBTklUWV9TVFVESU9fVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@sanity/preview-kit/dist/client/createClient.js\n"));

/***/ })

}]);